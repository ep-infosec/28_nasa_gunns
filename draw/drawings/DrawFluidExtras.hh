#ifndef DrawFluidExtras_EXISTS
#define DrawFluidExtras_EXISTS

/**
@file  DrawFluidExtras.hh
@brief DrawFluidExtras GUNNS Fluid Network declarations.

@copyright  Copyright 2019 United States Government as represented by the Administrator of the
            National Aeronautics and Space Administration. All Rights Reserved.

@defgroup  GUNNS_DRAWFLUIDTC DrawFluidTc GUNNS Fluid Network
@ingroup  GUNNS

@details
PURPOSE: (Provides classes for the DrawFluidExtras GUNNS Fluid Network.)

REFERENCES:
  ()

ASSUMPTIONS AND LIMITATIONS:
  ()

LIBRARY DEPENDENCY:
  ((DrawFluidExtras.o))

PROGRAMMERS:
  ((Auto-generated by the GunnsDraw netexport script version 19.3.6) (2022-06-06 07:15:07.613067))

@{
*/

#include "software/SimCompatibility/TsSimCompatibility.hh"
#include "core/network/GunnsNetworkBase.hh"
#include "core/GunnsFluidVolumeMonitor.hh"
#include "aspects/fluid/source/GunnsFluidReactor.hh"
#include "core/GunnsFluidCapacitor.hh"
#include "core/GunnsFluidJumper.hh"
#include "core/GunnsFluidPotential.hh"
#include "core/GunnsFluidSocket.hh"
#include "gunns/GunnsFluidMetabolic4.hh"
#include "properties/ChemicalReaction.hh"
#include "properties/ChemicalCompound.hh"
#include "core/GunnsFluidJumperPlug.hh"

// Forward-declare the main network class for use in the config data.
class DrawFluidExtras;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Data structure for DrawFluidExtras GUNNS network mass fractions.
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct DrawFluidExtrasFractions {
    double GUNNS_N2;
    double GUNNS_O2;
    double GUNNS_H2O;
    double GUNNS_CO2;
    double GUNNS_CH4;
    double GUNNS_H2;
} DrawFluidExtrasFractions;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Union for DrawFluidExtras GUNNS network mass fractions as scalars and as an array.
///         The array is used as an argument in the PolyFluidInputData constructor. 
////////////////////////////////////////////////////////////////////////////////////////////////////
union DrawFluidExtrasMassFractions {
    DrawFluidExtrasFractions scalar;
    double array[sizeof(DrawFluidExtrasFractions)/sizeof(double)];
    DrawFluidExtrasMassFractions(
        const double iGUNNS_N2,
        const double iGUNNS_O2,
        const double iGUNNS_H2O,
        const double iGUNNS_CO2,
        const double iGUNNS_CH4,
        const double iGUNNS_H2);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Data structure for a DrawFluidExtras GUNNS network trace compounds state as scalars.
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct DrawFluidExtras_netTcConfigScalars {
    double NH3;
    double CO;
} DrawFluidExtras_netTcConfigScalars;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Union for a DrawFluidExtras GUNNS network trace compounds state as scalars and as an
///         array. The array is used as an argument in various objects input data constructors. 
////////////////////////////////////////////////////////////////////////////////////////////////////
union DrawFluidExtras_netTcConfigState {
    DrawFluidExtras_netTcConfigScalars scalar;
    double array[sizeof(DrawFluidExtras_netTcConfigScalars)/sizeof(double)];
    DrawFluidExtras_netTcConfigState(
        const double iNH3,
        const double iCO);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Data structure for reactor compound total masses as scalars.
////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct DrawFluidExtras_reactorCompoundsMasses {
    double CH4;
    double O2;
    double CO2;
    double H2;
    double H2O;
} DrawFluidExtras_reactorCompoundsMasses;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief  Union for reactor compound masses as scalars and as an array.
///         The array is used as an argument in the chemical reactor input data constructor. 
////////////////////////////////////////////////////////////////////////////////////////////////////
union DrawFluidExtras_reactorCompoundsTotalMasses {
    DrawFluidExtras_reactorCompoundsMasses scalar;
    double array[sizeof(DrawFluidExtras_reactorCompoundsMasses)/sizeof(double)];
    DrawFluidExtras_reactorCompoundsTotalMasses(
        const double iCH4,
        const double iO2,
        const double iCO2,
        const double iH2,
        const double iH2O);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    DrawFluidExtras_sockets Jumper Plug definitions 
///
/// @details  Defines a jumper plug class for a socket list in this network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class DrawFluidExtras_sockets : public GunnsFluidJumperPlug
{
    TS_MAKE_SIM_COMPATIBLE(DrawFluidExtras_sockets);
    public:
        /// @brief  Enumeration of the socket options for this plug.
        enum socketsEnum {
            socket1 = 0,
            socket2 = 1,
            NONE = 2
        };
        socketsEnum mActiveConnection;     /**< *o (--) trick_chkpnt_io(*io) Currently connected socket     */
        socketsEnum mLastDisconnection;    /**< *o (--) trick_chkpnt_io(*io) Socket last disconnected from  */
        socketsEnum mConnectionRequest;    /**<    (--) trick_chkpnt_io(**)  Connect to socket command      */
        socketsEnum mDisconnectionRequest; /**<    (--) trick_chkpnt_io(**)  Disconnect form socket command */
        /// @brief  Default constructs this jumper plug.
        DrawFluidExtras_sockets(const std::string name)
            :
            GunnsFluidJumperPlug(name, static_cast <int> (NONE)),
            mActiveConnection    (NONE),
            mLastDisconnection   (NONE),
            mConnectionRequest   (NONE),
            mDisconnectionRequest(NONE) {}
        /// @brief Default desctructs this jumper plug.
        virtual ~DrawFluidExtras_sockets() {}
        /// @brief Sets the active connection of this plug to the given socket index.
        /// @param[in] index (--) Index to the socket list enumeration.
        virtual void setActiveConnection    (const int index) {mActiveConnection     = static_cast <socketsEnum> (index);}
        /// @brief Sets the last disconnected socket of this plug to the given socket index.
        /// @param[in] index (--) Index to the socket list enumeration.
        virtual void setLastDisconnection   (const int index) {mLastDisconnection    = static_cast <socketsEnum> (index);}
        /// @brief Sets the command to connected to the given socket index.
        /// @param[in] index (--) Index to the socket list enumeration.
        virtual void setConnectionRequest   (const int index) {mConnectionRequest    = static_cast <socketsEnum> (index);}
        /// @brief Sets the command to disconnect to the given socket index.
        /// @param[in] index (--) Index to the socket list enumeration.
        virtual void setDisconnectionRequest(const int index) {mDisconnectionRequest = static_cast <socketsEnum> (index);}
        /// @brief Returns the index of the currently connected socket.
        /// @return int (--) Index to the socket list enumeration.
        virtual int  getActiveConnection()     {return static_cast <int> (mActiveConnection);}
        /// @brief Returns the index of the socket last disconnected from.
        /// @return int (--) Index to the socket list enumeration.
        virtual int  getLastDisconnection()    {return static_cast <int> (mLastDisconnection);}
        /// @brief Returns the index of the socket the plug is commanded to connect to.
        /// @return int (--) Index to the socket list enumeration.
        virtual int  getConnectionRequest()    {return static_cast <int> (mConnectionRequest);}
        /// @brief Returns the index of the socket the plug is commanded to disconnect from.
        /// @return int (--) Index to the socket list enumeration.
        virtual int  getDisconnectionRequest() {return static_cast <int> (mDisconnectionRequest);}
        /// @brief Returns the index of no socket, the last index in the list.
        /// @return int (--) Index to the socket list enumeration.
        virtual int  getNoConnection()         {return static_cast <int> (NONE);}
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    DrawFluidExtras GUNNS Network Config Data
///
/// @details  Configuration data class for the DrawFluidExtras Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class DrawFluidExtrasConfigData
{
    public:
        /// @brief  Enumeration of the number of internal constituent fluids in this network.
        enum {N_INTERNAL_FLUIDS = 6};
        /// @brief  Number of trace compounds in this trace compounds config.
        enum {N_NETTCCONFIG = 2};
        /// @brief  Number of chemical reactions taking place in this chemical reactor.
        enum {N_REACTORREACTIONS = 2};
        /// @brief  Number of chemical compounds in this chemical reactor.
        enum {N_REACTORCOMPOUNDS = 5};
        // Network fluid configurations
        static FluidProperties::FluidType netInternalFluidTypes[DrawFluidExtrasConfigData::N_INTERNAL_FLUIDS];    /**< (--) trick_chkpnt_io(**) Network internal fluid types array. */
        // Trace compounds data
        static ChemicalCompound::Type netTcConfigTypes[DrawFluidExtrasConfigData::N_NETTCCONFIG];    /**< (--) trick_chkpnt_io(**) netTcConfig chemical compounds list. */
        GunnsFluidTraceCompoundsConfigData netTcConfig;    /**< (--) trick_chkpnt_io(**) netTcConfig config data. */
        // Chemical reactions properties
        DefinedChemicalReactions netReactions;    /**< (--) trick_chkpnt_io(**) Network defined chemical reactions */
        // Chemical compounds properties
        DefinedChemicalCompounds netCompounds;    /**< (--) trick_chkpnt_io(**) Network defined chemical compounds */
        static ChemicalReaction::Type reactorReactions[DrawFluidExtrasConfigData::N_REACTORREACTIONS];    /**< (--) trick_chkpnt_io(**) reactorReactions chemical reactions list. */
        static ChemicalCompound::Type reactorCompounds[DrawFluidExtrasConfigData::N_REACTORCOMPOUNDS];    /**< (--) trick_chkpnt_io(**) reactorCompounds chemical compounds list. */
        // Solver configuration data
        GunnsConfigData netSolver;    /**< (--) trick_chkpnt_io(**) Network solver config data. */ 
        // Spotters configuration data
        GunnsFluidVolumeMonitorConfigData tankVolumeMonitor;    /**< (--) trick_chkpnt_io(**) tankVolumeMonitor config data. */
        // Links configuration data
        GunnsFluidPotentialConfigData ambient;    /**< (--) trick_chkpnt_io(**) ambient config data. */
        GunnsFluidCapacitorConfigData tank;    /**< (--) trick_chkpnt_io(**) tank config data. */
        GunnsFluidReactorConfigData reactor;    /**< (--) trick_chkpnt_io(**) reactor config data. */
        GunnsFluidSocketConfigData socket1;    /**< (--) trick_chkpnt_io(**) socket1 config data. */
        GunnsFluidSocketConfigData socket2;    /**< (--) trick_chkpnt_io(**) socket2 config data. */
        GunnsFluidMetabolic4ConfigData crew;    /**< (--) trick_chkpnt_io(**) crew config data. */
        GunnsFluidJumperConfigData jumper;    /**< (--) trick_chkpnt_io(**) jumper config data. */
        /// @brief  Default constructs this network configuration data.
        DrawFluidExtrasConfigData(const std::string& name, DrawFluidExtras* network);
        /// @brief  Default destructs this network configuration data.
        virtual ~DrawFluidExtrasConfigData();

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        DrawFluidExtrasConfigData(const DrawFluidExtrasConfigData&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        DrawFluidExtrasConfigData& operator =(const DrawFluidExtrasConfigData&);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    DrawFluidExtras GUNNS Network Input Data
///
/// @details  Input data class for the DrawFluidExtras Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class DrawFluidExtrasInputData
{
    public:
        // Trace compounds states
        DrawFluidExtras_netTcConfigState tcDefaultValues; /**< (--) trick_chkpnt_io(**) tcDefault state values. */
        GunnsFluidTraceCompoundsInputData tcDefault; /**< (--) trick_chkpnt_io(**) tcDefault input data. */
        DrawFluidExtras_netTcConfigState tcAirValues; /**< (--) trick_chkpnt_io(**) tcAir state values. */
        GunnsFluidTraceCompoundsInputData tcAir; /**< (--) trick_chkpnt_io(**) tcAir input data. */
        // Internal network fluids
        DrawFluidExtrasMassFractions fluidDefaultFractions;    /**< (--) trick_chkpnt_io(**) Fluid mass fractions. */
        PolyFluidInputData fluidDefault;    /**< (--) trick_chkpnt_io(**) Fluid input data. */
        DrawFluidExtrasMassFractions fluidAirFractions;    /**< (--) trick_chkpnt_io(**) Fluid mass fractions. */
        PolyFluidInputData fluidAir;    /**< (--) trick_chkpnt_io(**) Fluid input data. */
        // Chemical compounds
        DrawFluidExtras_reactorCompoundsTotalMasses reactorCompoundsMasses;    /**< (--) trick_chkpnt_io(**) reactorCompounds chemical compounds mass array. */
        // Spotters input data
        GunnsFluidVolumeMonitorInputData tankVolumeMonitor;    /**< (--) trick_chkpnt_io(**) tankVolumeMonitor input data. */
        // Links input data
        GunnsFluidPotentialInputData ambient;    /**< (--) trick_chkpnt_io(**) ambient input data. */
        GunnsFluidCapacitorInputData tank;    /**< (--) trick_chkpnt_io(**) tank input data. */
        GunnsFluidReactorInputData reactor;    /**< (--) trick_chkpnt_io(**) reactor input data. */
        GunnsFluidSocketInputData socket1;    /**< (--) trick_chkpnt_io(**) socket1 input data. */
        GunnsFluidSocketInputData socket2;    /**< (--) trick_chkpnt_io(**) socket2 input data. */
        GunnsFluidMetabolic4InputData crew;    /**< (--) trick_chkpnt_io(**) crew input data. */
        GunnsFluidJumperInputData jumper;    /**< (--) trick_chkpnt_io(**) jumper input data. */
        /// @brief  Default constructs this network input data.
        DrawFluidExtrasInputData(DrawFluidExtras* network);
        /// @brief  Default destructs this network input data.
        virtual ~DrawFluidExtrasInputData();

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        DrawFluidExtrasInputData(const DrawFluidExtrasInputData&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        DrawFluidExtrasInputData& operator =(const DrawFluidExtrasInputData&);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    DrawFluidExtras GUNNS Network
///
/// @details  Main class for the DrawFluidExtras Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class DrawFluidExtras : public GunnsNetworkBase
{
    TS_MAKE_SIM_COMPATIBLE(DrawFluidExtras);
    public:
        /// @brief  Enumeration of the DrawFluidExtras Network nodes.
        enum Nodes
        {
            Node0 = 0,    ///< Node 0
            Node1 = 1,    ///< Node 1
            Node2 = 2,    ///< Node 2
            Node3 = 3,    ///< Node 3
            GROUND = 4,    ///< Ground Node
            N_NODES = 5    ///< Number of nodes including Ground
        };
        // Network declarations
        GunnsFluidNode netNodes[DrawFluidExtras::N_NODES];    /**< (--) Network nodes array. */
        DrawFluidExtrasConfigData netConfig;    /**< (--) trick_chkpnt_io(**) Network config data. */
        DrawFluidExtrasInputData netInput;    /**< (--) trick_chkpnt_io(**) Network input data. */
        const DefinedFluidProperties netFluidProperties;        /**< (--) trick_chkpnt_io(**) Network defined fluid properties. */
        PolyFluidConfigData          netInternalFluidConfig;    /**< (--) trick_chkpnt_io(**) Network internal fluid config. */
        // Data Tables
        // Spotters
        GunnsFluidVolumeMonitor tankVolumeMonitor;    /**< (--) tankVolumeMonitor instance. */
        // Jumper Plugs
        DrawFluidExtras_sockets jumperPlug1; /**< (--) jumperPlug1 instance. */
        // Links
        GunnsFluidPotential ambient;    /**< (--) ambient instance. */
        GunnsFluidCapacitor tank;    /**< (--) tank instance. */
        GunnsFluidReactor reactor;    /**< (--) reactor instance. */
        GunnsFluidSocket socket1;    /**< (--) socket1 instance. */
        GunnsFluidSocket socket2;    /**< (--) socket2 instance. */
        GunnsFluidMetabolic4 crew;    /**< (--) crew instance. */
        GunnsFluidJumper jumper;    /**< (--) jumper instance. */
        /// @brief  Default constructs this network.
        DrawFluidExtras(const std::string& name = "");
        /// @brief  Default destructs this network.
        virtual ~DrawFluidExtras();
        /// @brief  Network nodes initialization task.
        virtual void initNodes(const std::string& name);
        /// @brief  Network links & spotters initialization task.
        virtual void initNetwork();
        /// @brief  Update network spotters before the solver solution.
        virtual void stepSpottersPre(const double timeStep);
        /// @brief  Update network spotters after the solver solution.
        virtual void stepSpottersPost(const double timeStep);
        /// @brief  Returns this network's fluid configuration.
        virtual const PolyFluidConfigData* getFluidConfig() const;

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        DrawFluidExtras(const DrawFluidExtras&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        DrawFluidExtras& operator =(const DrawFluidExtras&);
};

/// @}  

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @returns  PolyFluidConfigData* (--) Pointer to this network's fluid configuration.
///
/// @details  Returns this network's fluid configuration.
////////////////////////////////////////////////////////////////////////////////////////////////////
inline const PolyFluidConfigData* DrawFluidExtras::getFluidConfig() const
{
    return &netInternalFluidConfig;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] iGUNNS_N2 (--) Mass fraction of the GUNNS_N2 constituent in the composite fluid.
/// @param[in] iGUNNS_O2 (--) Mass fraction of the GUNNS_O2 constituent in the composite fluid.
/// @param[in] iGUNNS_H2O (--) Mass fraction of the GUNNS_H2O constituent in the composite fluid.
/// @param[in] iGUNNS_CO2 (--) Mass fraction of the GUNNS_CO2 constituent in the composite fluid.
/// @param[in] iGUNNS_CH4 (--) Mass fraction of the GUNNS_CH4 constituent in the composite fluid.
/// @param[in] iGUNNS_H2 (--) Mass fraction of the GUNNS_H2 constituent in the composite fluid.
///
/// @details  Constructs the mass fraction union from the scalar mass fraction arguments.
////////////////////////////////////////////////////////////////////////////////////////////////////
inline DrawFluidExtrasMassFractions::DrawFluidExtrasMassFractions (
    const double iGUNNS_N2,
    const double iGUNNS_O2,
    const double iGUNNS_H2O,
    const double iGUNNS_CO2,
    const double iGUNNS_CH4,
    const double iGUNNS_H2)
{
    scalar.GUNNS_N2 = iGUNNS_N2;
    scalar.GUNNS_O2 = iGUNNS_O2;
    scalar.GUNNS_H2O = iGUNNS_H2O;
    scalar.GUNNS_CO2 = iGUNNS_CO2;
    scalar.GUNNS_CH4 = iGUNNS_CH4;
    scalar.GUNNS_H2 = iGUNNS_H2;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] iCH4 (--) Mass of the CH4 compound in the reactor.
/// @param[in] iO2 (--) Mass of the O2 compound in the reactor.
/// @param[in] iCO2 (--) Mass of the CO2 compound in the reactor.
/// @param[in] iH2 (--) Mass of the H2 compound in the reactor.
/// @param[in] iH2O (--) Mass of the H2O compound in the reactor.
///
/// @details  Constructs the total masses union from the scalar reactor mass arguments.
////////////////////////////////////////////////////////////////////////////////////////////////////
inline DrawFluidExtras_reactorCompoundsTotalMasses::DrawFluidExtras_reactorCompoundsTotalMasses(
    const double iCH4,
    const double iO2,
    const double iCO2,
    const double iH2,
    const double iH2O)
{
    scalar.CH4= iCH4;
    scalar.O2= iO2;
    scalar.CO2= iCO2;
    scalar.H2= iH2;
    scalar.H2O= iH2O;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] iNH3 (--) Value of the NH3 trace compound state.
/// @param[in] iCO (--) Value of the CO trace compound state.
///
/// @details  Constructs the trace compounds state union from the scalar value arguments.
////////////////////////////////////////////////////////////////////////////////////////////////////
inline DrawFluidExtras_netTcConfigState::DrawFluidExtras_netTcConfigState(
    const double iNH3,
    const double iCO)
{
    scalar.NH3 = iNH3;
    scalar.CO = iCO;
}

#endif
