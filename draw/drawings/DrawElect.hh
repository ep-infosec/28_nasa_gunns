#ifndef DrawElect_EXISTS
#define DrawElect_EXISTS

/**
@file  DrawElect.hh
@brief DrawElect GUNNS Basic Network declarations.

@copyright  Copyright 2022 United States Government as represented by the Administrator of the
            National Aeronautics and Space Administration. All Rights Reserved.

@ingroup  GUNNS
@defgroup  GUNNS_DRAWELECT DrawElect GUNNS Basic Network

@details
PURPOSE: (Provides classes for the DrawElect GUNNS Basic Network.)

REFERENCES:
  ()

ASSUMPTIONS AND LIMITATIONS:
  ()

LIBRARY DEPENDENCY:
  ((DrawElect.o))

PROGRAMMERS:
  ((Auto-generated by the GunnsDraw netexport script version 19.3.7) (2022-06-17 09:45:59.620429))

@{
*/

#include "software/SimCompatibility/TsSimCompatibility.hh"
#include "math/approximation/TsLinearInterpolator.hh"
#include "core/network/GunnsNetworkBase.hh"
#include "core/GunnsSensorAnalogWrapper.hh"
#include "aspects/electrical/Batt/GunnsElectBattery.hh"
#include "aspects/electrical/ConstantPowerLoad/EpsConstantPowerLoad.hh"
#include "aspects/electrical/Converter/GunnsElectConverterInput.hh"
#include "aspects/electrical/Converter/GunnsElectConverterOutput.hh"
#include "aspects/electrical/IPS/GunnsElectIps.hh"
#include "aspects/electrical/Switch/GunnsElectSelector.hh"
#include "aspects/electrical/resistive/GunnsElectShort.hh"
#include "core/GunnsBasicCapacitor.hh"
#include "core/GunnsBasicConductor.hh"
#include "core/GunnsBasicPotential.hh"

// Forward-declare the main network class for use in the config data.
class DrawElect;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    DrawElect GUNNS Network Config Data
///
/// @details  Configuration data class for the DrawElect Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class DrawElectConfigData
{
    public:
        // Solver configuration data
        GunnsConfigData netSolver;    /**< (--) trick_chkpnt_io(**) Network solver config data. */ 
        // Spotters configuration data
        GunnsSensorAnalogWrapperConfigData converterSenseVout;    /**< (--) trick_chkpnt_io(**) converterSenseVout config data. */
        GunnsSensorAnalogWrapperConfigData converterSenseIout;    /**< (--) trick_chkpnt_io(**) converterSenseIout config data. */
        GunnsSensorAnalogWrapperConfigData converterSenseVin;    /**< (--) trick_chkpnt_io(**) converterSenseVin config data. */
        // Links configuration data
        GunnsBasicConductorConfigData resistor_1;    /**< (--) trick_chkpnt_io(**) resistor_1 config data. */
        GunnsBasicCapacitorConfigData capacitor;    /**< (--) trick_chkpnt_io(**) capacitor config data. */
        GunnsElectSelectorConfigData selector;    /**< (--) trick_chkpnt_io(**) selector config data. */
        GunnsElectBatteryConfigData battery;    /**< (--) trick_chkpnt_io(**) battery config data. */
        GunnsBasicConductorConfigData load_3;    /**< (--) trick_chkpnt_io(**) load_3 config data. */
        GunnsBasicConductorConfigData load_4;    /**< (--) trick_chkpnt_io(**) load_4 config data. */
        GunnsElectIpsConfigData testIps;    /**< (--) trick_chkpnt_io(**) testIps config data. */
        EpsConstantPowerLoadConfigData load_2;    /**< (--) trick_chkpnt_io(**) load_2 config data. */
        GunnsElectShortConfigData short1;    /**< (--) trick_chkpnt_io(**) short1 config data. */
        GunnsElectConverterInputConfigData converterIn;    /**< (--) trick_chkpnt_io(**) converterIn config data. */
        GunnsElectConverterOutputConfigData converterOut;    /**< (--) trick_chkpnt_io(**) converterOut config data. */
        GunnsBasicPotentialConfigData load_1;    /**< (--) trick_chkpnt_io(**) load_1 config data. */
        /// @brief  Default constructs this network configuration data.
        DrawElectConfigData(const std::string& name, DrawElect* network);
        /// @brief  Default destructs this network configuration data.
        virtual ~DrawElectConfigData();

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        DrawElectConfigData(const DrawElectConfigData&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        DrawElectConfigData& operator =(const DrawElectConfigData&);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    DrawElect GUNNS Network Input Data
///
/// @details  Input data class for the DrawElect Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class DrawElectInputData
{
    public:
        // Spotters input data
        GunnsSensorAnalogWrapperInputData converterSenseVout;    /**< (--) trick_chkpnt_io(**) converterSenseVout input data. */
        GunnsSensorAnalogWrapperInputData converterSenseIout;    /**< (--) trick_chkpnt_io(**) converterSenseIout input data. */
        GunnsSensorAnalogWrapperInputData converterSenseVin;    /**< (--) trick_chkpnt_io(**) converterSenseVin input data. */
        // Links input data
        GunnsBasicConductorInputData resistor_1;    /**< (--) trick_chkpnt_io(**) resistor_1 input data. */
        GunnsBasicCapacitorInputData capacitor;    /**< (--) trick_chkpnt_io(**) capacitor input data. */
        GunnsElectSelectorInputData selector;    /**< (--) trick_chkpnt_io(**) selector input data. */
        GunnsElectBatteryInputData battery;    /**< (--) trick_chkpnt_io(**) battery input data. */
        GunnsBasicConductorInputData load_3;    /**< (--) trick_chkpnt_io(**) load_3 input data. */
        GunnsBasicConductorInputData load_4;    /**< (--) trick_chkpnt_io(**) load_4 input data. */
        GunnsElectIpsInputData testIps;    /**< (--) trick_chkpnt_io(**) testIps input data. */
        EpsConstantPowerLoadInputData load_2;    /**< (--) trick_chkpnt_io(**) load_2 input data. */
        GunnsElectShortInputData short1;    /**< (--) trick_chkpnt_io(**) short1 input data. */
        GunnsElectConverterInputInputData converterIn;    /**< (--) trick_chkpnt_io(**) converterIn input data. */
        GunnsElectConverterOutputInputData converterOut;    /**< (--) trick_chkpnt_io(**) converterOut input data. */
        GunnsBasicPotentialInputData load_1;    /**< (--) trick_chkpnt_io(**) load_1 input data. */
        /// @brief  Default constructs this network input data.
        DrawElectInputData(DrawElect* network);
        /// @brief  Default destructs this network input data.
        virtual ~DrawElectInputData();

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        DrawElectInputData(const DrawElectInputData&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        DrawElectInputData& operator =(const DrawElectInputData&);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    DrawElect GUNNS Network
///
/// @details  Main class for the DrawElect Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class DrawElect : public GunnsNetworkBase
{
    TS_MAKE_SIM_COMPATIBLE(DrawElect);
    public:
        /// @brief  Enumeration of the DrawElect Network nodes.
        enum Nodes
        {
            Node0 = 0,    ///< Node 0
            Node1 = 1,    ///< Node 1
            Node2 = 2,    ///< Node 2
            Node3 = 3,    ///< Node 3
            Node4 = 4,    ///< Node 4
            Node5 = 5,    ///< Node 5
            Node6 = 6,    ///< Node 6
            GROUND = 7,    ///< Ground Node
            N_NODES = 8    ///< Number of nodes including Ground
        };
        // Network declarations
        GunnsBasicNode netNodes[DrawElect::N_NODES];    /**< (--) Network nodes array. */
        DrawElectConfigData netConfig;    /**< (--) trick_chkpnt_io(**) Network config data. */
        DrawElectInputData netInput;    /**< (--) trick_chkpnt_io(**) Network input data. */
        // Data Tables
        static const double batterySocVocSoC[3];    /**< (--) batterySocVoc SoC (x) axis. */
        static const double batterySocVocVoc[3];    /**< (--) batterySocVoc Voc (y) axis. */
        TsLinearInterpolator batterySocVoc;    /**< (--) batterySocVoc linear interpolator. */
        // Spotters
        GunnsSensorAnalogWrapper converterSenseVout;    /**< (--) converterSenseVout instance. */
        GunnsSensorAnalogWrapper converterSenseIout;    /**< (--) converterSenseIout instance. */
        GunnsSensorAnalogWrapper converterSenseVin;    /**< (--) converterSenseVin instance. */
        // Links
        GunnsBasicConductor resistor_1;    /**< (--) resistor_1 instance. */
        GunnsBasicCapacitor capacitor;    /**< (--) capacitor instance. */
        GunnsElectSelector selector;    /**< (--) selector instance. */
        GunnsElectBattery battery;    /**< (--) battery instance. */
        GunnsBasicConductor load_3;    /**< (--) load_3 instance. */
        GunnsBasicConductor load_4;    /**< (--) load_4 instance. */
        GunnsElectIps testIps;    /**< (--) testIps instance. */
        EpsConstantPowerLoad load_2;    /**< (--) load_2 instance. */
        GunnsElectShort short1;    /**< (--) short1 instance. */
        GunnsElectConverterInput converterIn;    /**< (--) converterIn instance. */
        GunnsElectConverterOutput converterOut;    /**< (--) converterOut instance. */
        GunnsBasicPotential load_1;    /**< (--) load_1 instance. */
        /// @brief  Default constructs this network.
        DrawElect(const std::string& name = "");
        /// @brief  Default destructs this network.
        virtual ~DrawElect();
        /// @brief  Network nodes initialization task.
        virtual void initNodes(const std::string& name);
        /// @brief  Network links & spotters initialization task.
        virtual void initNetwork();
        /// @brief  Update network spotters before the solver solution.
        virtual void stepSpottersPre(const double timeStep);
        /// @brief  Update network spotters after the solver solution.
        virtual void stepSpottersPost(const double timeStep);

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        DrawElect(const DrawElect&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        DrawElect& operator =(const DrawElect&);
};

/// @}  

#endif
