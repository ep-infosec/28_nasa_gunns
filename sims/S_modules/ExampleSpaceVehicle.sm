/* @copyright Copyright 2019 United States Government as represented by the Administrator of the
              National Aeronautics and Space Administration.  All Rights Reserved. */
           
##include "sims/networks/example_space_vehicle/ExamplePowerElect.hh"
##include "sims/networks/example_space_vehicle/ExamplePassiveThermal.hh"
##include "sims/networks/example_space_vehicle/ExampleHxThermal.hh"
##include "sims/networks/example_space_vehicle/ExampleCabinFluid.hh"
##include "sims/networks/example_space_vehicle/ExampleCoolantLoopFluid.hh"
##include "sims/networks/example_space_vehicle/models/ExampleSignal.hh"

class ExampleSpaceVehicleSimObject: public Trick::SimObject
{
    public:
        int                     threadIdFluid;      /**< (--) Thread ID for the fluid networks */
        int                     threadIdElect;      /**< (--) Thread ID for the elect networks */
        int                     threadIdThermal;    /**< (--) Thread ID for the thermal networks */
        ExamplePowerElect       powerElect;         /**< (--) GUNNS electrical network */
        ExamplePassiveThermal   passiveThermal;     /**< (--) GUNNS thermal network */
        ExampleHxThermal        hxThermal;          /**< (--) GUNNS thermal network */
        ExampleCabinFluid       cabinFluid;         /**< (--) GUNNS fluid network */
        ExampleCoolantLoopFluid coolantLoopFluid;   /**< (--) GUNNS fluid network */
        ExampleSignal           signal;             /**< (--) Signal aspect model */
        ExampleSpaceVehicleSimObject(int thread_id_fluid   = 0,
                                     int thread_id_elect   = 0,
                                     int thread_id_thermal = 0)
            :
            threadIdFluid(thread_id_fluid),
            threadIdElect(thread_id_elect),
            threadIdThermal(thread_id_thermal),
            powerElect("vehicle.powerElect"),
            passiveThermal("vehicle.passiveThermal"),
            hxThermal("vehicle.hxThermal"),
            cabinFluid("vehicle.cabinFluid"),
            coolantLoopFluid("vehicle.coolantLoopFluid"),
            signal()
        {
            ("initialization")      powerElect.initialize();
            ("initialization")      passiveThermal.initialize();
            ("initialization")      hxThermal.initialize();
            ("initialization")      cabinFluid.initialize();
            ("initialization")      coolantLoopFluid.initialize();
            ("initialization")      signal.init("vehicle.signal");
            ("restart")             powerElect.restart();
            ("restart")             passiveThermal.restart();
            ("restart")             hxThermal.restart();
            ("restart")             cabinFluid.restart();
            ("restart")             coolantLoopFluid.restart();
            CthreadIdElect  (MODELS_10HZ, "scheduled") powerElect.update(MODELS_10HZ);
            CthreadIdThermal(MODELS_1HZ,  "scheduled") passiveThermal.update(MODELS_1HZ);
            CthreadIdFluid  (MODELS_10HZ, "scheduled") hxThermal.update(MODELS_10HZ);
            CthreadIdFluid  (MODELS_10HZ, "scheduled") cabinFluid.update(MODELS_10HZ);
            CthreadIdFluid  (MODELS_10HZ, "scheduled") coolantLoopFluid.update(MODELS_10HZ);
            CthreadIdElect  (MODELS_10HZ, "scheduled") signal.step(MODELS_10HZ);
        }
        
        virtual ~ExampleSpaceVehicleSimObject() { /* nothing to do */ }
        
    private:
        // Copy constructor unavailable since declared private and not implemented.
        ExampleSpaceVehicleSimObject(const ExampleSpaceVehicleSimObject&);
        // Assignment operator unavailable since declared private and not implemented.
        ExampleSpaceVehicleSimObject operator = (const ExampleSpaceVehicleSimObject&);
};
