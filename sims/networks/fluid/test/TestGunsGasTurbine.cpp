
/**
@file
@brief TestGunsGasTurbine Network implementation. 

 LIBRARY DEPENDENCY:
 (
    (aspects/fluid/conductor/GunnsDriveShaftSpotter.o)
    (core/GunnsFluidPotential.o)
    (aspects/fluid/conductor/GunnsGasTurbine.o)
    (aspects/fluid/potential/GunnsGasFan.o)
    (aspects/fluid/source/GunnsFluidHeater.o)
    (core/Gunns.o)
 )

 PROGRAMMERS:
 (
    (AutoGenerated by GunnShow)    (9/29/2016)
 )
*/

#include "simulation/hs/TsHsMsg.hh"
#include "software/exceptions/TsInitializationException.hh"
#include "TestGunsGasTurbine.hh"

/// @details Loads constituent fluid types into the network's internal fluid types array.
FluidProperties::FluidType TestGunsGasTurbineConfigData::netInternalFluidTypes[TestGunsGasTurbineConfigData::N_INTERNAL_FLUIDS] =
{
    FluidProperties::GUNNS_N2
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] name             (--) Name of the network for H&S messages.
/// @param[in] network          (--) Pointer to the main network object.
/// 
/// @details  Default constructs the TestGunsGasTurbine Network Config Data
////////////////////////////////////////////////////////////////////////////////////////////////////
TestGunsGasTurbineConfigData::TestGunsGasTurbineConfigData(const std::string& name, TestGunsGasTurbine* network)
    :
    netSolver(name + ".netSolver",0.001, 1E-6, 1, 1),
    DriveShaft(name + ".DriveShaft", 0, 7.37E-7, 100, 0.00005, 0),
    SourcePotential(name + ".SourcePotential", &network->netNodeList,100000, 0.5),
    ExitPotential(name + ".ExitPotential", &network->netNodeList,100000, 0.5),
    Turbine1(name + ".Turbine1", &network->netNodeList,100, 0.5, 273.0, 101.0, 105, 105, 2.537, 2.5, -0.642, -0.5, -21.87, 59.26, -60.1744, 29.884, -7.289, 0.6995, -1.656, 3.008, -1.32, 0.266, -0.0222, 0.00035, 1, 1, 2.8, 5.8, 800000, 900000, 0.5, 1, 0.1, 0.1, 0.0000001),
    Fan1(name + ".Fan1", &network->netNodeList,100, 0.5, 1.19, 4000, 0.375, -24.6528, 1167.09, -21093.2, 168250, -549729, 0, 0, 0.5, 1.0, 0.1, 0.1, 2E-6),
    Heater(name + ".Heater", &network->netNodeList,1.0),
    LoadFan(name + ".LoadFan", &network->netNodeList,1, 0.5, 1.19, 4000, 0.375, -24.6528, 1167.09, -21093.2, 168250, -549729, 0, 0, 0.5, 1.0, 0.1, 0.1, 2E-6),
    stubBool(true)
{
	// Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default destructs the TestGunsGasTurbine Network Config Data
////////////////////////////////////////////////////////////////////////////////////////////////////
TestGunsGasTurbineConfigData::~TestGunsGasTurbineConfigData()
{
	// Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default constructs the TestGunsGasTurbine Network Input Data
/// @param[in] network          (--) Pointer to the main network object.
////////////////////////////////////////////////////////////////////////////////////////////////////
TestGunsGasTurbineInputData::TestGunsGasTurbineInputData(TestGunsGasTurbine* network)
    :
    DefaultFluidStateFractions(1),
    DefaultFluidState(273, 101.325, 0, 1, DefaultFluidStateFractions.array, 0),
    DriveShaft(0, 30000),
    SourcePotential(false, 0.0, 100),
    ExitPotential(false, 0.0, -100),
    Turbine1(false, 0.0, 3000, 300),
    Fan1(false, 0.0, 0, 3000, 300),
    Heater(false, 0.0, 5000000),
    LoadFan(false, 0.0, 0, 0, 300),
    stubBool(true)
{
	// Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default destructs the TestGunsGasTurbine Network Input Data
////////////////////////////////////////////////////////////////////////////////////////////////////
TestGunsGasTurbineInputData::~TestGunsGasTurbineInputData()
{
	// Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in]  name  (--)  Name of the network for H&S messages.
///
/// @return   void  
/// @details  Default constructs the TestGunsGasTurbine Network. All input and config objects are
///           constructed with argument values and the network, node and link objects are default
///           constructed.
////////////////////////////////////////////////////////////////////////////////////////////////////
TestGunsGasTurbine::TestGunsGasTurbine(const std::string& name)
    :
    netSolver(),
    netNodes(),
    netNodeList(N_NODES, netNodes),
    netLinks(),
    netConfig(name, this),
    netInput(this),
    netFluidProperties(),
    netInternalFluidConfig(&netFluidProperties, netConfig.netInternalFluidTypes, TestGunsGasTurbineConfigData::N_INTERNAL_FLUIDS),
    DriveShaft(),
    SourcePotential(),
    ExitPotential(),
    Turbine1(),
    Fan1(),
    Heater(),
    LoadFan(),
    stubBool(true)
{
    // Nothing to do

}

/////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default destructs the TestGunsGasTurbine Network.
/////////////////////////////////////////////////////////////////////////////////////////////////
TestGunsGasTurbine::~TestGunsGasTurbine()
{
    // Nothing to do
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in]  name  (--) Name of the network for H&S messages.
///
/// @return   void  
///
/// @details  Initialization task for the TestGunsGasTurbine Network. The network, node,
///           and link objects are initialized with their config and input data objects. 
/////////////////////////////////////////////////////////////////////////////////////////////////
void TestGunsGasTurbine::initialize(const std::string& name)
{
    try{
	/// - Initialize the nodes. Catch any exceptions and terminate
    netNodes[0].initialize(name + ".Node0", &netInternalFluidConfig, &netInput.DefaultFluidState);
    netNodes[1].initialize(name + ".Node1", &netInternalFluidConfig, &netInput.DefaultFluidState);
    netNodes[2].initialize(name + ".Node2", &netInternalFluidConfig, &netInput.DefaultFluidState);
    netNodes[3].initialize(name + ".Node3", &netInternalFluidConfig, &netInput.DefaultFluidState);
    netNodes[4].initialize(name + "VACUUM", &netInternalFluidConfig, 0);

    /// - Register the nodes with the solver.
    netSolver.initializeFluidNodes(netNodeList);

    /// - Register sockets with the jumper plugs.


    /// - Initialize the links. Catch any exceptions and terminate.
    netLinks.clear();
    SourcePotential.initialize(netConfig.SourcePotential, netInput.SourcePotential, netLinks, VACUUM, Node0);
    ExitPotential.initialize(netConfig.ExitPotential, netInput.ExitPotential, netLinks, Node3, VACUUM);
    Turbine1.initialize(netConfig.Turbine1, netInput.Turbine1, netLinks, Node2, Node3);
    Fan1.initialize(netConfig.Fan1, netInput.Fan1, netLinks, Node0, Node1);
    Heater.initialize(netConfig.Heater, netInput.Heater, netLinks, VACUUM, Node2);
    LoadFan.initialize(netConfig.LoadFan, netInput.LoadFan, netLinks, Node1, Node2);
    
    /// - Initialize the spotters.
    DriveShaft.initialize(&netConfig.DriveShaft, &netInput.DriveShaft);
   
        /// - Initialize the solver. Catch any exceptions and send a fatal H&S message.
        netSolver.initialize(netConfig.netSolver, netLinks);

    } catch (TsInitializationException& e) {
        /// - Send an H&S fatal message and return on TsInitializationException
        TsHsMsg msg(TS_HS_FATAL, "GUNNS");
        msg << "TestGunsGasTurbine network caught initialization exception." << '\n' << tsStackTrace();
        hsSendMsg(msg);
    } catch (const std::exception& e) {
        /// - Send an H&S fatal message and return on unexpected exception derived from std::exception.
        TsHsMsg msg(TS_HS_FATAL, "GUNNS");
        msg << "TestGunsGasTurbine network caught unexpected exception." << '\n' << e.what() << tsStackTrace();
        hsSendMsg(msg);
    } catch (...) {
        /// - Send an h&s fatal message and return on unexpected exception not derived from std::exception.
        TsHsMsg msg(TS_HS_FATAL, "GUNNS");
        msg << "TestGunsGasTurbine network caught unexpected exception." << '\n' << tsStackTrace();
        hsSendMsg(msg);
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/// @return   void 
///
/// @details  Restart task for the TestGunsGasTurbine Network.
/////////////////////////////////////////////////////////////////////////////////////////////////
void TestGunsGasTurbine::restart()
{
    try {
        /// - Restart the solver.  Catch any exceptions and send a non-fatal H&S error.
        netSolver.restart();
        
    } catch (const std::exception& e) {
        /// - Send an H&S error message and return on unexpected exception derived from std::exception.
        TsHsMsg msg(TS_HS_ERROR, "GUNNS");
        msg << "TestGunsGasTurbine network caught unexpected exception." << '\n' << e.what() << tsStackTrace();
        hsSendMsg(msg);
    } catch (...) {
        /// - Send an H&S error message and return on unexpected exception not derived from std::exception.
        TsHsMsg msg(TS_HS_ERROR, "GUNNS");
        msg << "TestGunsGasTurbine network caught unexpected exception." << '\n' << tsStackTrace();
        hsSendMsg(msg);
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in]   timeStep    (s)   Integration time step
///
/// @return   void  
///
/// @details  Update task for the TestGunsGasTurbine Network.
/////////////////////////////////////////////////////////////////////////////////////////////////
void TestGunsGasTurbine::update(const double timeStep)
{
    try{

        /// - Step network spotters prior to solver step.
        DriveShaft.stepPreSolver(timeStep);
 

        /// - Step the solver.  Catch any exceptions and send a non-fatal H&S error.
        netSolver.step(timeStep);

        /// - Step network spotters after solver step.
        DriveShaft.stepPostSolver(timeStep);
 
    } catch (const std::exception& e) {
        /// - Send an H&S error message and return on unexpected exception derived from std::exception.
        TsHsMsg msg(TS_HS_ERROR, "GUNNS");
        msg << "TestGunsGasTurbine network caught unexpected exception." << '\n' << e.what() << tsStackTrace();
        hsSendMsg(msg);
    } catch (...) {
        /// - Send an H&S error message and return on unexpected exception not derived from std::exception.
        TsHsMsg msg(TS_HS_ERROR, "GUNNS");
        msg << "TestGunsGasTurbine network caught unexpected exception." << '\n' << tsStackTrace();
        hsSendMsg(msg);
    }
}

