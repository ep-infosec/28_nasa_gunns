/**
@file  PvArrayRegTest.cpp
@brief PvArrayRegTest GUNNS Basic Network implementation.

@copyright  Copyright 2019 United States Government as represented by the Administrator of the
            National Aeronautics and Space Administration. All Rights Reserved.

LIBRARY DEPENDENCY:
(
  (core/GunnsSensorAnalogWrapper.o)
  (aspects/electrical/ConstantPowerLoad/EpsConstantPowerLoad.o)
  (aspects/electrical/SolarArray/GunnsElectPvArray.o)
  (aspects/electrical/SolarArray/GunnsElectPvRegConv.o)
  (aspects/electrical/SolarArray/GunnsElectPvRegShunt.o)
  (core/GunnsBasicConductor.o)
  (core/network/GunnsNetworkBase.o)
)

PROGRAMMERS:
  ((Auto-generated by the GunnsDraw netexport script version 19.2.0) (2021-04-12 05:59:34.936714))
*/

#include "PvArrayRegTest.hh"
#include "simulation/hs/TsHsMsg.hh"
#include "software/exceptions/TsInitializationException.hh"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] name    (--) Name of the network for H&S messages.
/// @param[in] network (--) Pointer to the main network object.
/// 
/// @details  Default constructs the PvArrayRegTest Network Config Data.
////////////////////////////////////////////////////////////////////////////////////////////////////
PvArrayRegTestConfigData::PvArrayRegTestConfigData(const std::string& name, PvArrayRegTest* network)
    :
    netSolver(name + ".netSolver", 0.001, 0.001, 25, 20),
    // Spotter Config Data
    SAR1SensorVin(name + ".SAR1SensorVin", 0.0, 20.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0, UnitConversion::NO_CONVERSION, 0.0),
    SAR1SensorVout(name + ".SAR1SensorVout", 0.0, 20.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0, UnitConversion::NO_CONVERSION, 0.0),
    SAR1SensorIin(name + ".SAR1SensorIin", 0.0, 30.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0, UnitConversion::NO_CONVERSION, 0.0),
    SAR1SensorIout(name + ".SAR1SensorIout", 0.0, 20.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0, UnitConversion::NO_CONVERSION, 0.0),
    SAR2SensorVin(name + ".SAR2SensorVin", 0.0, 20.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0, UnitConversion::NO_CONVERSION, 0.0),
    SAR2SensorIin(name + ".SAR2SensorIin", 0.0, 5.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0, UnitConversion::NO_CONVERSION, 0.0),
    SAR2SensorVout(name + ".SAR2SensorVout", 0.0, 20.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0, UnitConversion::NO_CONVERSION, 0.0),
    SAR2SensorIout(name + ".SAR2SensorIout", 0.0, 20.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0, UnitConversion::NO_CONVERSION, 0.0),
    // Link Config Data
    R1(name + ".R1", &network->netNodeList, 0.1),
    CPL1(name + ".CPL1", &network->netNodeList, 0.0, 0.0, 1.0),
    PvArray1(name + ".PvArray1", &network->netNodeList, 3, 9, 1.0, 0.7, false, 1361.0, 0.6, 0.6, 5, 20, 0.05, 1.0, 0.017, 200.0, 0.6, 294.261, -0.003, 0.00065),
    SAR1(name + ".SAR1", &network->netNodeList, 1.333, 0.97, &network->PvArray1, &network->SAR1SensorIin, &network->SAR1SensorVin, &network->SAR1SensorIout, &network->SAR1SensorVout, 20.0, 11.5, 15.0, 15.0, 5.0, 1),
    PvArray2(name + ".PvArray2", &network->netNodeList, 3, 9, 1.0, 0.7, false, 1361.0, 0.6, 0.6, 5, 20, 0.05, 1.0, 0.017, 200.0, 0.6, 294.261, -0.003, 0.00065),
    R2(name + ".R2", &network->netNodeList, 0.1),
    CPL2(name + ".CPL2", &network->netNodeList, 0.0, 0.0, 1.0),
    SAR2(name + ".SAR2", &network->netNodeList, 100.0, 100.0, &network->PvArray2, &network->SAR2SensorIin, &network->SAR2SensorVin, &network->SAR2SensorIout, &network->SAR2SensorVout, 4.0, 11.5, 15.0, 15.0, 5.0, 1),
    PvArray3(name + ".PvArray3", &network->netNodeList, 3, 9, 1.0, 0.7, false, 1361.0, 0.6, 0.6, 5, 20, 0.05, 1.0, 0.017, 200.0, 0.6, 294.261, -0.003, 0.00065),
    R3(name + ".R3", &network->netNodeList, 0.1),
    CPL3(name + ".CPL3", &network->netNodeList, 0.0, 0.0, 1.0)
{
    // Load config data vectors
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default destructs the PvArrayRegTest Network Config Data.
////////////////////////////////////////////////////////////////////////////////////////////////////
PvArrayRegTestConfigData::~PvArrayRegTestConfigData()
{
    // Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] network (--) Pointer to the main network object.
///
/// @details  Default constructs the PvArrayRegTest Network Input Data.
////////////////////////////////////////////////////////////////////////////////////////////////////
PvArrayRegTestInputData::PvArrayRegTestInputData(PvArrayRegTest* network)
    :
    // Spotter Input Data
    SAR1SensorVin(true, 0.0),
    SAR1SensorVout(true, 0.0),
    SAR1SensorIin(true, 0.0),
    SAR1SensorIout(true, 0.0),
    SAR2SensorVin(true, 0.0),
    SAR2SensorIin(true, 0.0),
    SAR2SensorVout(true, 0.0),
    SAR2SensorIout(true, 0.0),
    // Link Input Data
    R1(false, 0.0),
    CPL1(false, 0.0),
    PvArray1(31.626, 0.0, 1.0, 294.261),
    SAR1(12.0, -2.0, true, true),
    PvArray2(31.626, 0.0, 1.0, 294.261),
    R2(false, 0.0),
    CPL2(false, 0.0),
    SAR2(10.0, true, true, 0.0),
    PvArray3(31.626, 0.0, 1.0, 294.261),
    R3(false, 0.0),
    CPL3(false, 0.0)
{
    // Load input data vectors
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Default destructs the PvArrayRegTest Network Input Data.
////////////////////////////////////////////////////////////////////////////////////////////////////
PvArrayRegTestInputData::~PvArrayRegTestInputData()
{
    // Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] name (--) Name of the network for H&S messages.
///
/// @details  Default constructs the PvArrayRegTest Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
PvArrayRegTest::PvArrayRegTest(const std::string& name)
    :
    GunnsNetworkBase(name, N_NODES, netNodes),
    netNodes(),
    netConfig(name, this),
    netInput(this),
    // Data Tables 
    // Spotters
    SAR1SensorVin(),
    SAR1SensorVout(),
    SAR1SensorIin(),
    SAR1SensorIout(),
    SAR2SensorVin(),
    SAR2SensorIin(),
    SAR2SensorVout(),
    SAR2SensorIout(),
    // Links
    R1(),
    CPL1(),
    PvArray1(),
    SAR1(),
    PvArray2(),
    R2(),
    CPL2(),
    SAR2(),
    PvArray3(),
    R3(),
    CPL3()
{
    // Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details Default destructs the PvArrayRegTest Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
PvArrayRegTest::~PvArrayRegTest()
{
    // Nothing to do
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] name (--) Name of the network for H&S messages.
///
/// @details  Initializes the nodes with their config and input data objects.  The nodes are
///           initialized through the node list object, which may point to this network's nodes
///           (when this is a standalone network), or the super-network's nodes (as a sub-network).
////////////////////////////////////////////////////////////////////////////////////////////////////
void PvArrayRegTest::initNodes(const std::string& name)
{
    /// - Initialize the nodes.
    netNodeList.mNodes[0 + netSuperNodesOffset].initialize(name + createNodeName(0 + netSuperNodesOffset), 11.999);
    netNodeList.mNodes[1 + netSuperNodesOffset].initialize(name + createNodeName(1 + netSuperNodesOffset), 0);
    netNodeList.mNodes[2 + netSuperNodesOffset].initialize(name + createNodeName(2 + netSuperNodesOffset), 0);
    netNodeList.mNodes[3 + netSuperNodesOffset].initialize(name + createNodeName(3 + netSuperNodesOffset), 0);
    /// - Only init the Ground node if this is not a sub-network.
    if (!netIsSubNetwork) {
        netNodeList.mNodes[4].initialize(name + ".GROUND");
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Initializes this network's links, spotters and solver with their config and input data
///           objects.
////////////////////////////////////////////////////////////////////////////////////////////////////
void PvArrayRegTest::initNetwork()
{
    const int groundOffset = netNodeList.mNumNodes - N_NODES;

    /// - Register sockets with the jumper plugs.

    /// - Initialize the links.
    netLinks.clear();
    R1.initialize(netConfig.R1, netInput.R1, netLinks, Node0 + netSuperNodesOffset, GROUND + groundOffset);
    CPL1.initialize(netConfig.CPL1, netInput.CPL1, netLinks, Node0 + netSuperNodesOffset, GROUND + groundOffset);
    PvArray1.initialize(netConfig.PvArray1, netInput.PvArray1, netLinks, GROUND + groundOffset);
    SAR1.initialize(netConfig.SAR1, netInput.SAR1, netLinks, Node0 + netSuperNodesOffset);
    PvArray2.initialize(netConfig.PvArray2, netInput.PvArray2, netLinks, Node1 + netSuperNodesOffset);
    R2.initialize(netConfig.R2, netInput.R2, netLinks, Node2 + netSuperNodesOffset, GROUND + groundOffset);
    CPL2.initialize(netConfig.CPL2, netInput.CPL2, netLinks, Node2 + netSuperNodesOffset, GROUND + groundOffset);
    SAR2.initialize(netConfig.SAR2, netInput.SAR2, netLinks, Node1 + netSuperNodesOffset, Node2 + netSuperNodesOffset);
    PvArray3.initialize(netConfig.PvArray3, netInput.PvArray3, netLinks, Node3 + netSuperNodesOffset);
    R3.initialize(netConfig.R3, netInput.R3, netLinks, Node3 + netSuperNodesOffset, GROUND + groundOffset);
    CPL3.initialize(netConfig.CPL3, netInput.CPL3, netLinks, Node3 + netSuperNodesOffset, GROUND + groundOffset);

    /// - Initialize the spotters.
    SAR1SensorVin.initialize(&netConfig.SAR1SensorVin, &netInput.SAR1SensorVin);
    SAR1SensorVout.initialize(&netConfig.SAR1SensorVout, &netInput.SAR1SensorVout);
    SAR1SensorIin.initialize(&netConfig.SAR1SensorIin, &netInput.SAR1SensorIin);
    SAR1SensorIout.initialize(&netConfig.SAR1SensorIout, &netInput.SAR1SensorIout);
    SAR2SensorVin.initialize(&netConfig.SAR2SensorVin, &netInput.SAR2SensorVin);
    SAR2SensorIin.initialize(&netConfig.SAR2SensorIin, &netInput.SAR2SensorIin);
    SAR2SensorVout.initialize(&netConfig.SAR2SensorVout, &netInput.SAR2SensorVout);
    SAR2SensorIout.initialize(&netConfig.SAR2SensorIout, &netInput.SAR2SensorIout);

    /// - Initialize the solver, only if this is not a sub-network.
    if (!netIsSubNetwork) {
        netSolver.initializeNodes(netNodeList);
        netSolver.initialize(netConfig.netSolver, netLinks);
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in] timeStep (s) Integration time step.
///
/// @details  Updates this network's spotters before solving the network.
////////////////////////////////////////////////////////////////////////////////////////////////////
void PvArrayRegTest::stepSpottersPre(const double timeStep)
{
    /// - Step network spotters prior to solver step.
    SAR1SensorVin.stepPreSolver(timeStep);
    SAR1SensorVout.stepPreSolver(timeStep);
    SAR1SensorIin.stepPreSolver(timeStep);
    SAR1SensorIout.stepPreSolver(timeStep);
    SAR2SensorVin.stepPreSolver(timeStep);
    SAR2SensorIin.stepPreSolver(timeStep);
    SAR2SensorVout.stepPreSolver(timeStep);
    SAR2SensorIout.stepPreSolver(timeStep);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in]   timeStep (s) Integration time step.
///
/// @details  Updates this network's spotters after solving the network.
////////////////////////////////////////////////////////////////////////////////////////////////////
void PvArrayRegTest::stepSpottersPost(const double timeStep)
{
    /// - Step network spotters after solver step.
    SAR1SensorVin.stepPostSolver(timeStep);
    SAR1SensorVout.stepPostSolver(timeStep);
    SAR1SensorIin.stepPostSolver(timeStep);
    SAR1SensorIout.stepPostSolver(timeStep);
    SAR2SensorVin.stepPostSolver(timeStep);
    SAR2SensorIin.stepPostSolver(timeStep);
    SAR2SensorVout.stepPostSolver(timeStep);
    SAR2SensorIout.stepPostSolver(timeStep);
}
