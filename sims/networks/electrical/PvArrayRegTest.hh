#ifndef PvArrayRegTest_EXISTS
#define PvArrayRegTest_EXISTS

/**
@file  PvArrayRegTest.hh
@brief PvArrayRegTest GUNNS Basic Network declarations.

@copyright  Copyright 2019 United States Government as represented by the Administrator of the
            National Aeronautics and Space Administration. All Rights Reserved.

@defgroup  GUNNS_PVARRAYREGTEST PvArrayRegTest GUNNS Basic Network
@ingroup  GUNNS

@details
PURPOSE: (Provides classes for the PvArrayRegTest GUNNS Basic Network.)

REFERENCES:
  ()

ASSUMPTIONS AND LIMITATIONS:
  ()

LIBRARY DEPENDENCY:
  ((PvArrayRegTest.o))

PROGRAMMERS:
  ((Auto-generated by the GunnsDraw netexport script version 19.2.0) (2021-04-12 05:59:34.936714))

@{
*/

#include "software/SimCompatibility/TsSimCompatibility.hh"
#include "core/network/GunnsNetworkBase.hh"
#include "core/GunnsSensorAnalogWrapper.hh"
#include "aspects/electrical/ConstantPowerLoad/EpsConstantPowerLoad.hh"
#include "aspects/electrical/SolarArray/GunnsElectPvArray.hh"
#include "aspects/electrical/SolarArray/GunnsElectPvRegConv.hh"
#include "aspects/electrical/SolarArray/GunnsElectPvRegShunt.hh"
#include "core/GunnsBasicConductor.hh"

// Forward-declare the main network class for use in the config data.
class PvArrayRegTest;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    PvArrayRegTest GUNNS Network Config Data
///
/// @details  Configuration data class for the PvArrayRegTest Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class PvArrayRegTestConfigData
{
    public:
        // Solver configuration data
        GunnsConfigData netSolver;    /**< (--) trick_chkpnt_io(**) Network solver config data. */ 
        // Spotters configuration data
        GunnsSensorAnalogWrapperConfigData SAR1SensorVin;    /**< (--) trick_chkpnt_io(**) SAR1SensorVin config data. */
        GunnsSensorAnalogWrapperConfigData SAR1SensorVout;    /**< (--) trick_chkpnt_io(**) SAR1SensorVout config data. */
        GunnsSensorAnalogWrapperConfigData SAR1SensorIin;    /**< (--) trick_chkpnt_io(**) SAR1SensorIin config data. */
        GunnsSensorAnalogWrapperConfigData SAR1SensorIout;    /**< (--) trick_chkpnt_io(**) SAR1SensorIout config data. */
        GunnsSensorAnalogWrapperConfigData SAR2SensorVin;    /**< (--) trick_chkpnt_io(**) SAR2SensorVin config data. */
        GunnsSensorAnalogWrapperConfigData SAR2SensorIin;    /**< (--) trick_chkpnt_io(**) SAR2SensorIin config data. */
        GunnsSensorAnalogWrapperConfigData SAR2SensorVout;    /**< (--) trick_chkpnt_io(**) SAR2SensorVout config data. */
        GunnsSensorAnalogWrapperConfigData SAR2SensorIout;    /**< (--) trick_chkpnt_io(**) SAR2SensorIout config data. */
        // Links configuration data
        GunnsBasicConductorConfigData R1;    /**< (--) trick_chkpnt_io(**) R1 config data. */
        EpsConstantPowerLoadConfigData CPL1;    /**< (--) trick_chkpnt_io(**) CPL1 config data. */
        GunnsElectPvArrayConfigData PvArray1;    /**< (--) trick_chkpnt_io(**) PvArray1 config data. */
        GunnsElectPvRegConvConfigData SAR1;    /**< (--) trick_chkpnt_io(**) SAR1 config data. */
        GunnsElectPvArrayConfigData PvArray2;    /**< (--) trick_chkpnt_io(**) PvArray2 config data. */
        GunnsBasicConductorConfigData R2;    /**< (--) trick_chkpnt_io(**) R2 config data. */
        EpsConstantPowerLoadConfigData CPL2;    /**< (--) trick_chkpnt_io(**) CPL2 config data. */
        GunnsElectPvRegShuntConfigData SAR2;    /**< (--) trick_chkpnt_io(**) SAR2 config data. */
        GunnsElectPvArrayConfigData PvArray3;    /**< (--) trick_chkpnt_io(**) PvArray3 config data. */
        GunnsBasicConductorConfigData R3;    /**< (--) trick_chkpnt_io(**) R3 config data. */
        EpsConstantPowerLoadConfigData CPL3;    /**< (--) trick_chkpnt_io(**) CPL3 config data. */
        /// @brief  Default constructs this network configuration data.
        PvArrayRegTestConfigData(const std::string& name, PvArrayRegTest* network);
        /// @brief  Default destructs this network configuration data.
        virtual ~PvArrayRegTestConfigData();

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        PvArrayRegTestConfigData(const PvArrayRegTestConfigData&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        PvArrayRegTestConfigData& operator =(const PvArrayRegTestConfigData&);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    PvArrayRegTest GUNNS Network Input Data
///
/// @details  Input data class for the PvArrayRegTest Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class PvArrayRegTestInputData
{
    public:
        // Spotters input data
        GunnsSensorAnalogWrapperInputData SAR1SensorVin;    /**< (--) trick_chkpnt_io(**) SAR1SensorVin input data. */
        GunnsSensorAnalogWrapperInputData SAR1SensorVout;    /**< (--) trick_chkpnt_io(**) SAR1SensorVout input data. */
        GunnsSensorAnalogWrapperInputData SAR1SensorIin;    /**< (--) trick_chkpnt_io(**) SAR1SensorIin input data. */
        GunnsSensorAnalogWrapperInputData SAR1SensorIout;    /**< (--) trick_chkpnt_io(**) SAR1SensorIout input data. */
        GunnsSensorAnalogWrapperInputData SAR2SensorVin;    /**< (--) trick_chkpnt_io(**) SAR2SensorVin input data. */
        GunnsSensorAnalogWrapperInputData SAR2SensorIin;    /**< (--) trick_chkpnt_io(**) SAR2SensorIin input data. */
        GunnsSensorAnalogWrapperInputData SAR2SensorVout;    /**< (--) trick_chkpnt_io(**) SAR2SensorVout input data. */
        GunnsSensorAnalogWrapperInputData SAR2SensorIout;    /**< (--) trick_chkpnt_io(**) SAR2SensorIout input data. */
        // Links input data
        GunnsBasicConductorInputData R1;    /**< (--) trick_chkpnt_io(**) R1 input data. */
        EpsConstantPowerLoadInputData CPL1;    /**< (--) trick_chkpnt_io(**) CPL1 input data. */
        GunnsElectPvArrayInputData PvArray1;    /**< (--) trick_chkpnt_io(**) PvArray1 input data. */
        GunnsElectPvRegConvInputData SAR1;    /**< (--) trick_chkpnt_io(**) SAR1 input data. */
        GunnsElectPvArrayInputData PvArray2;    /**< (--) trick_chkpnt_io(**) PvArray2 input data. */
        GunnsBasicConductorInputData R2;    /**< (--) trick_chkpnt_io(**) R2 input data. */
        EpsConstantPowerLoadInputData CPL2;    /**< (--) trick_chkpnt_io(**) CPL2 input data. */
        GunnsElectPvRegShuntInputData SAR2;    /**< (--) trick_chkpnt_io(**) SAR2 input data. */
        GunnsElectPvArrayInputData PvArray3;    /**< (--) trick_chkpnt_io(**) PvArray3 input data. */
        GunnsBasicConductorInputData R3;    /**< (--) trick_chkpnt_io(**) R3 input data. */
        EpsConstantPowerLoadInputData CPL3;    /**< (--) trick_chkpnt_io(**) CPL3 input data. */
        /// @brief  Default constructs this network input data.
        PvArrayRegTestInputData(PvArrayRegTest* network);
        /// @brief  Default destructs this network input data.
        virtual ~PvArrayRegTestInputData();

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        PvArrayRegTestInputData(const PvArrayRegTestInputData&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        PvArrayRegTestInputData& operator =(const PvArrayRegTestInputData&);
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    PvArrayRegTest GUNNS Network
///
/// @details  Main class for the PvArrayRegTest Network.
////////////////////////////////////////////////////////////////////////////////////////////////////
class PvArrayRegTest : public GunnsNetworkBase
{
    TS_MAKE_SIM_COMPATIBLE(PvArrayRegTest);
    public:
        /// @brief  Enumeration of the PvArrayRegTest Network nodes.
        enum Nodes
        {
            Node0 = 0,    ///< Node 0
            Node1 = 1,    ///< Node 1
            Node2 = 2,    ///< Node 2
            Node3 = 3,    ///< Node 3
            GROUND = 4,    ///< Ground Node
            N_NODES = 5    ///< Number of nodes including Ground
        };
        // Network declarations
        GunnsBasicNode netNodes[PvArrayRegTest::N_NODES];    /**< (--) Network nodes array. */
        PvArrayRegTestConfigData netConfig;    /**< (--) trick_chkpnt_io(**) Network config data. */
        PvArrayRegTestInputData netInput;    /**< (--) trick_chkpnt_io(**) Network input data. */
        // Data Tables
        // Spotters
        GunnsSensorAnalogWrapper SAR1SensorVin;    /**< (--) SAR1SensorVin instance. */
        GunnsSensorAnalogWrapper SAR1SensorVout;    /**< (--) SAR1SensorVout instance. */
        GunnsSensorAnalogWrapper SAR1SensorIin;    /**< (--) SAR1SensorIin instance. */
        GunnsSensorAnalogWrapper SAR1SensorIout;    /**< (--) SAR1SensorIout instance. */
        GunnsSensorAnalogWrapper SAR2SensorVin;    /**< (--) SAR2SensorVin instance. */
        GunnsSensorAnalogWrapper SAR2SensorIin;    /**< (--) SAR2SensorIin instance. */
        GunnsSensorAnalogWrapper SAR2SensorVout;    /**< (--) SAR2SensorVout instance. */
        GunnsSensorAnalogWrapper SAR2SensorIout;    /**< (--) SAR2SensorIout instance. */
        // Links
        GunnsBasicConductor R1;    /**< (--) R1 instance. */
        EpsConstantPowerLoad CPL1;    /**< (--) CPL1 instance. */
        GunnsElectPvArray PvArray1;    /**< (--) PvArray1 instance. */
        GunnsElectPvRegConv SAR1;    /**< (--) SAR1 instance. */
        GunnsElectPvArray PvArray2;    /**< (--) PvArray2 instance. */
        GunnsBasicConductor R2;    /**< (--) R2 instance. */
        EpsConstantPowerLoad CPL2;    /**< (--) CPL2 instance. */
        GunnsElectPvRegShunt SAR2;    /**< (--) SAR2 instance. */
        GunnsElectPvArray PvArray3;    /**< (--) PvArray3 instance. */
        GunnsBasicConductor R3;    /**< (--) R3 instance. */
        EpsConstantPowerLoad CPL3;    /**< (--) CPL3 instance. */
        /// @brief  Default constructs this network.
        PvArrayRegTest(const std::string& name = "");
        /// @brief  Default destructs this network.
        virtual ~PvArrayRegTest();
        /// @brief  Network nodes initialization task.
        virtual void initNodes(const std::string& name);
        /// @brief  Network links & spotters initialization task.
        virtual void initNetwork();
        /// @brief  Update network spotters before the solver solution.
        virtual void stepSpottersPre(const double timeStep);
        /// @brief  Update network spotters after the solver solution.
        virtual void stepSpottersPost(const double timeStep);

    private:
        /// @details  Copy constructor unavailable since declared private and not implemented.
        PvArrayRegTest(const PvArrayRegTest&);
        /// @details  Assignment operator unavailable since declared private and not implemented.
        PvArrayRegTest& operator =(const PvArrayRegTest&);
};

/// @}  

#endif
