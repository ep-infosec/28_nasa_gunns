/**
 @file
 @brief    Unit Conversion Constants and Functions implementation.

@copyright Copyright 2019 United States Government as represented by the Administrator of the
           National Aeronautics and Space Administration.  All Rights Reserved.

 LIBRARY DEPENDENCY:
     ((simulation/hs/TsHsMsg.o)
      (software/exceptions/TsOutOfBoundsException.o)
      (software/exceptions/TsInitializationException.o))
*/

#include "UnitConversion.hh"
#include "simulation/hs/TsHsMsg.hh"
#include "software/exceptions/TsOutOfBoundsException.hh"
#include "software/exceptions/TsInitializationException.hh"
#include "software/exceptions/TsHsException.hh"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) Array of pointers to the individual conversion functions.  This allows the
///                desired function to be accessed via the conversion type enum as an index into
///                this array.
///
/// @note Every member of the Type enum must have a corresponding function in this array, except for
///       the NUM_CONVERSIONS member.  Changes to the Type enum must coincide with changes to this
///       array initialization.  These array positions must match the Type enum in the same order.
////////////////////////////////////////////////////////////////////////////////////////////////////
const UnitConversion::convertPtr UnitConversion::convertFunctions[] = {
        UnitConversion::convertNothing,                   // NO_CONVERSION
        UnitConversion::convertUnitToMicro,               // UNIT_TO_MICRO
        UnitConversion::convertUnitToMilli,               // UNIT_TO_MILLI
        UnitConversion::convertUnitToKilo,                // UNIT_TO_KILO
        UnitConversion::convertUnitToMega,                // UNIT_TO_MEGA
        UnitConversion::convertFracToPercent,             // FRAC_TO_PERCENT
        UnitConversion::convertUnitPerSecToUnitPerHour,   // UNITPERSEC_TO_UNITPERHOUR
        UnitConversion::convertDegFToDegR,                // F_TO_R
        UnitConversion::convertDegFToDegC,                // F_TO_C
        UnitConversion::convertDegFToDegK,                // F_TO_K
        UnitConversion::convertDegRToDegF,                // R_TO_F
        UnitConversion::convertDegRToDegC,                // R_TO_C
        UnitConversion::convertDegRToDegK,                // R_TO_K
        UnitConversion::convertDegCToDegF,                // C_TO_F
        UnitConversion::convertDegCToDegR,                // C_TO_R
        UnitConversion::convertDegCToDegK,                // C_TO_K
        UnitConversion::convertDegKToDegC,                // K_TO_C
        UnitConversion::convertDegKToDegF,                // K_TO_F
        UnitConversion::convertDegKToDegR,                // K_TO_R
        UnitConversion::convertKpaToPsi,                  // KPA_TO_PSI
        UnitConversion::convertKpaToMmhg,                 // KPA_TO_MMHG
        UnitConversion::convertKpaToMilliTorr,            // KPA_TO_MILLITORR
        UnitConversion::convertKpaToInh2o,                // KPA_TO_INH2O
        UnitConversion::convertPsiToKpa,                  // PSI_TO_KPA
        UnitConversion::convertKgPerSecToLbmPerHour,      // KG_PER_SEC_TO_LBM_PER_HOUR
        UnitConversion::convertKgPerSecToScfm0C,          // KG_PER_SEC_TO_SCFM0C
        UnitConversion::convertLbmPerHourToKgPerSec,      // LBM_PER_HOUR_TO_KG_PER_SEC
        UnitConversion::convertPrToDb,                    // PR_TO_DB
        UnitConversion::convertDbToPr,                    // DB_TO_PR
        UnitConversion::convertWToDbw,                    // W_TO_DBW
        UnitConversion::convertRadToDeg,                  // RAD_TO_DEG
        UnitConversion::convertDegToRad,                  // DEG_TO_RAD
        UnitConversion::convertRadPerSecToRpm,            // RADPERSEC_TO_RPM
        UnitConversion::convertRpmtoRadPerSec             // RPM_TO_RADPERSEC
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) A tolerance
/// - Tolerance, Primary
/// - Current value = 1.0000000000000000e-08
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::TEN_TO_THE_MINUS_8            =
    1.0E-8;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) A tighter tolerance
/// - Tolerance, Primary
/// - Current value = 9.9999999999999998e-13
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::TEN_TO_THE_MINUS_12           =
    1.0E-12;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) Unit to milli-unit conversion factor.
/// - Units, Primary
/// - Current value = 1.0e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::MILLI_PER_UNIT                =
    1.0e+03;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) Milli-unit to unit conversion factor.
/// - Units, Primary
/// - Current value = 1.0e-03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::UNIT_PER_MILLI                =
    1.0e-03;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) Unit to kilo-unit conversion factor.
/// - Units, Primary
/// - Current value = 1.0e-03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KILO_PER_UNIT                 =
    1.0e-03;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) Kilo-unit to unit conversion factor.
/// - Units, Primary
/// - Current value = 1.0e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::UNIT_PER_KILO                 =
    1.0e+03;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) Unit to mega-unit conversion factor.
/// - Units, Primary
/// - Current value = 1.0e-06
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::MEGA_PER_UNIT                 =
    1.0e-06;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) Mega-unit to unit conversion factor.
/// - Units, Primary
/// - Current value = 1.0e+06
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::UNIT_PER_MEGA                 =
    1.0e+06;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (s/year) Year to seconds conversion factor
/// - Time, Primary, NIST
/// - Current value = 3.1536000000000000e+07
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SEC_PER_YEAR                  =
    31536000;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (s/day) Days to seconds conversion factor
/// - Time, Primary, NIST
/// - Current value = 8.6400000000000000e+04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SEC_PER_DAY                   =
    86400.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (s/hr) Hours to seconds conversion factor
/// - Time, Primary, NIST
/// - Current value = 3.6000000000000000e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SEC_PER_HR                    =
    3600.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (s/min) Minutes to seconds conversion factor
/// - Time, Primary, NIST
/// - Current value = 6.0000000000000000e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SEC_PER_MIN                   =
    60.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (s/min) Seconds to hours conversion factor
/// - Time, Derived
/// - Current value = 2.7777777777777778e-04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::HR_PER_SEC                    =
    1.0 / UnitConversion::SEC_PER_HR;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (min/hr) Hours to minutes conversion factor
/// - Time, Derived
/// - Current value = 6.0000000000000000e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::MIN_PER_HR                    =
    UnitConversion::SEC_PER_HR / UnitConversion::SEC_PER_MIN;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (hr/min) Minutes to hours conversion factor
/// - Time, Derived
/// - Current value = 1.6666666666666666e-02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::HR_PER_MIN                    =
    UnitConversion::SEC_PER_MIN / UnitConversion::SEC_PER_HR;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (hr/day) Days to hours conversion factor
/// - Time, Derived
/// - Current value = 2.4000000000000000e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::HR_PER_DAY                    =
    UnitConversion::SEC_PER_DAY / UnitConversion::SEC_PER_HR;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (min/sec) Seconds to minutes conversion factor
/// - Time, Derived
/// - Current value = 1.6666666666666666e-02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::MIN_PER_SEC                   =
    1.0 / UnitConversion::SEC_PER_MIN;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (day/yr) Years to days conversion factor
/// - Time, Primary
/// - Current value = 365
////////////////////////////////////////////////////////////////////////////////////////////////////
const int    UnitConversion::DAYS_PER_YEAR                 =
    365;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (day/week) Week to days conversion factor
/// - Time, Primary
/// - Current value = 7
////////////////////////////////////////////////////////////////////////////////////////////////////
const int    UnitConversion::DAYS_PER_WEEK                 =
    7;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (mo/yr) Years to months conversion factor
/// - Time, Primary
/// - Current value = 12
////////////////////////////////////////////////////////////////////////////////////////////////////
const int    UnitConversion::MONTHS_PER_YEAR               =
    12;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (yr) Maximum Julian calendar year
/// - Time, Primary
/// - Current value = 2200
////////////////////////////////////////////////////////////////////////////////////////////////////
const int    UnitConversion::MAX_YEAR                      =
    2200;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (yr) Minimum Julian calendar year
/// - Time, Primary
/// - Current value = 1970
////////////////////////////////////////////////////////////////////////////////////////////////////
const int    UnitConversion::MIN_YEAR                      =
    1970;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (day) Days of year starting year, starting months and ending year in a nominal year
/// - Time, Primary
/// - Current value = 0, 0,31,59,90,120,151,181,212,243,273,304,334,365
////////////////////////////////////////////////////////////////////////////////////////////////////
const int    UnitConversion::START_DAY_NORM[14]              =
{0, 0,31,59,90,120,151,181,212,243,273,304,334,365};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (day) Days of year starting year, starting months and ending year in a leap year
/// - Time, Primary
/// - Current value = 0, 0,31,60,91,121,152,182,213,244,274,305,335,366
////////////////////////////////////////////////////////////////////////////////////////////////////
const int    UnitConversion::START_DAY_LEAP[14]              =
{0, 0,31,60,91,121,152,182,213,244,274,305,335,366};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (sec/yr) Nominal year to seconds conversion factor
/// - Time, Derived
/// - Current value = 3.1536000000000000e+07
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::COMMON_YEAR_SEC               =
    DAYS_PER_YEAR * SEC_PER_DAY;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (sec/yr) Leap year to seconds conversion factor
/// - Time, Derived
/// - Current value = 3.1622400000000000e+07
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::LEAP_YEAR_SEC                 =
    (DAYS_PER_YEAR + 1.0) * SEC_PER_DAY;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (s/ms) Seconds to Milliseconds conversion factor
/// - Time, Primary
/// - Current value = 1.0000000000000000e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SEC_PER_MSEC                  =
    1.0E3;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (ms/s) Milliseconds to Seconds conversion factor
/// - Frequency, Primary
/// - Current value = 1.0000000000000000e-03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::MSEC_PER_SEC                  =
    1.0E-3;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (Hz/MHz) Megahertz to Hertz conversion factor
/// - Frequency, Primary
/// - Current value = 1.0000000000000000e+06
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::HZ_PER_MHZ                    =
    1.0E6;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (Mhz/Hz) Hertz to Megahertz conversion factor
/// - Frequency, Derived
/// - Current value = 9.9999999999999995e-07
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::MHZ_PER_HZ                    =
    1.0 / UnitConversion::HZ_PER_MHZ;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (in/ft) Feet to inches conversion factor
/// - Length, Primary
/// - Current value = 1.2000000000000000e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::IN_PER_FT_UTIL                     =
    12.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (ft/in) Inches to feet conversion factor
/// - Length, Derived
/// - Current value = 8.3333333333333329e-02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::FT_PER_IN                     =
    1.0 / UnitConversion::IN_PER_FT_UTIL;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (ft/yd) Yards to feet conversion factor
/// - Length, Primary
/// - Current value = 3.0000000000000000e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::FT_PER_YD                     =
    3.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (yd/ft) Feet to yards conversion factor
/// - Length, Derived
/// - Current value = 3.3333333333333331e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::YD_PER_FT                     =
    1.0 / UnitConversion::FT_PER_YD;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m/in)  Inches to meters conversion factor
/// - Length, Primary, NIST
/// - Current value = 2.5399999999999999e-02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::M_PER_IN                      =
    0.0254;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (cm/in) Inches to centimeters conversion factor
/// - Length, Derived
/// - Current value = 2.5400000000000000e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::CM_PER_IN                     =
    100.0 * UnitConversion::M_PER_IN;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (in/cm) Centimeters to inches conversion factor
/// - Length, Derived
/// - Current value = 3.9370078740157483e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::IN_PER_CM                     =
    0.01 / UnitConversion::M_PER_IN;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (in/m) Meters to inches conversion factor
/// - Length, Derived
/// - Current value = 3.9370078740157481e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::IN_PER_M                      =
    1.0 / UnitConversion::M_PER_IN;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m/ft) Feet to meters conversion factor
/// - Length, Primary, NIST
/// - Current value = 3.0480000000000002e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::M_PER_FT                      =
    0.3048;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (ft/m) Meters to feet conversion factor
/// - Length, Derived
/// - Current value = 3.2808398950131230e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::FT_PER_M                      =
    1.0 / UnitConversion::M_PER_FT;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m/km) Kilometers to meters conversion factor
/// - Length, Primary
/// - Current value = 1.0000000000000000e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::M_PER_KM                      =
    1000.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (km/m) Meters to kilometers conversion factor
/// - Length, Derived
/// - Current value = 1.0000000000000000e-03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KM_PER_M                      =
    1.0 / UnitConversion::M_PER_KM;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (in2/ft2) Square feet to square inches conversion factor
/// - Area, Derived
/// - Current value = 1.4400000000000000e+02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::IN2_PER_FT2_UTIL                   =
    UnitConversion::IN_PER_FT_UTIL * UnitConversion::IN_PER_FT_UTIL;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (ft2/in2) Square inches to square feet conversion factor
/// - Area, Derived
/// - Current value = 6.9444444444444441e-03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::FT2_PER_IN2                   =
    1.0 / UnitConversion::IN2_PER_FT2_UTIL;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m2/in2) Square inches to square meters conversion factor
/// - Area, Derived
/// - Current value = 6.4515999999999998e-04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::M2_PER_IN2_UTIL                    =
    UnitConversion::M_PER_IN * UnitConversion::M_PER_IN;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (in2/m2) Square meters to square inches conversion factor
/// - Area, Derived
/// - Current value = 1.5500031000062002e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::IN2_PER_M2                    =
    1.0 / UnitConversion::M2_PER_IN2_UTIL;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m2/ft2) Square feet to square meters conversion factor
/// - Area, Derived
/// - Current value = 9.2903040000000006e-02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::M2_PER_FT2                    =
    UnitConversion::M_PER_FT * UnitConversion::M_PER_FT;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (ft2/m2) Square meters to square feet conversion factor
/// - Area, Derived
/// - Current value = 1.0763910416709722e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::FT2_PER_M2                    =
    1.0 / UnitConversion::M2_PER_FT2;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (in3/ft3) Cubic feet to cubic inches conversion factor
/// - Volume, Derived
/// - Current value = 1.7280000000000000e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::IN3_PER_FT3                   =
    UnitConversion::IN_PER_FT_UTIL * UnitConversion::IN2_PER_FT2_UTIL;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (ft3/in3) Cubic inches to cubic feet conversion factor
/// - Volume, Derived
/// - Current value = 5.7870370370370367e-04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::FT3_PER_IN3                   =
    1.0 / UnitConversion::IN3_PER_FT3;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m3/in3) Cubic inches to cubic meters conversion factor
/// - Volume, Derived
/// - Current value = 1.6387063999999999e-05
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::M3_PER_IN3                    =
    UnitConversion::M_PER_IN * UnitConversion::M2_PER_IN2_UTIL;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (in3/m3) Cubic meters to cubic inches conversion factor
/// - Volume, Derived
/// - Current value = 6.1023744094732290e+04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::IN3_PER_M3                    =
    1.0 / UnitConversion::M3_PER_IN3;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m3/ft3) Cubic feet to cubic meters conversion factor
/// - Volume, Derived
/// - Current value = 2.8316846592000004e-02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::M3_PER_FT3                    =
    UnitConversion::M_PER_FT * UnitConversion::M2_PER_FT2;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (ft3/m3) Cubic meters to cubic feet conversion factor
/// - Volume, Derived
/// - Current value = 3.5314666721488585e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::FT3_PER_M3                    =
    1.0 / UnitConversion::M3_PER_FT3;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m3/ml) Milliliters to cubic meters conversion factor
/// - Volume, Defined
/// - Current value = 1.0e-06
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::M3_PER_ML                    =
    1.0e-06;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (ml/m3) cubic meters to milliliters conversion factor
/// - Volume, Derived
/// - Current value = 1.0e+06
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::ML_PER_M3                    =
    1.0 / UnitConversion::M3_PER_ML;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (Pa/psi) Pounds per square inch to pascals conversion factor
/// - Pressure, Primary, NIST
/// - Current value = 6.8947569999999996e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PA_PER_PSI                    =
    6894.757;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (kPa/psi) Pounds per square inch to kilopascals conversion factor
/// - Pressure, Derived
/// - Current value = 6.8947569999999994e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KPA_PER_PSI                   =
    UnitConversion::PA_PER_PSI * UnitConversion::KILO_PER_UNIT;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (psi/Pa) Pascals to pounds per square inch conversion factor
/// - Pressure, Derived
/// - Current value = 1.4503774389728312e-04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PSI_PER_PA                    =
    1.0 / UnitConversion::PA_PER_PSI;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (psi/kPa) Kilopascals to pounds per square inch conversion factor
/// - Pressure, Derived
/// - Current value = 1.4503774389728313e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PSI_PER_KPA                   =
    1.0 / UnitConversion::KPA_PER_PSI;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (torr/psi) Pounds per square inch to torrs conversion factor
/// - Pressure, Primary, NIST
/// - Current value = 5.1714918123286111e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::TORR_PER_PSI                  =
    UnitConversion::PA_PER_PSI / 133.3224  ;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (torr/kPa) Kilopascal to torrs conversion factor
/// - Pressure, Derived
/// - Current value = 7.5006150504341367e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::TORR_PER_KPA                  =
    UnitConversion::TORR_PER_PSI * UnitConversion::PSI_PER_KPA;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (psi/torr) Torrs to pounds per square inch conversion factor
/// - Pressure, Derived
/// - Current value = 1.9336780106971138e-02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PSI_PER_TORR                  =
    1.0 / UnitConversion::TORR_PER_PSI;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (psi/atm) Atmospheres to pounds per square inch conversion factor
/// - Pressure, Primary, NIST
/// - Current value = 1.4695949400392212e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PSI_PER_ATM                   =
    101325.0 / UnitConversion::PA_PER_PSI;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (atm/psi) Pounds per square inch to atmospheres conversion factor
/// - Pressure, Derived
/// - Current value = 6.8045961016530959e-02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::ATM_PER_PSI                   =
    1.0 / UnitConversion::PSI_PER_ATM;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (Pa/atm) Atmospheres to pascals conversion factor
/// - Pressure, Primary
/// - Current value = 1.0132500000000000e+05
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PA_PER_ATM                    =
    101325.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (Pa/atm) Pascals to atmospheres conversion factor
/// - Pressure, Derived
/// - Current value = 9.8692326671601285e-06
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::ATM_PER_PA                    =
    1.0 / UnitConversion::PA_PER_ATM;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (mmHg/psi) Pounds per square inch to millimeters mercury conversion factor
/// - Pressure, Primary, NIST
/// - Current value = 5.1714918123286111e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::MMHG_PER_PSI                  =
    UnitConversion::TORR_PER_PSI;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (kPa/mmHg) Millimeters mercury to kilopascal conversion factor
/// - Pressure, Primary, NIST
/// - Current value = 1.3332240000000001e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KPA_PER_MMHG                  =
    0.1333224;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (Pa/kPa) kilopascals to pascals conversion factor
/// - Pressure, Primary
/// - Current value = 1000.0
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PA_PER_KPA                    =
    1000.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (kPa/Pa) pascals to kilopascals conversion factor
/// - Pressure, Derived
/// - Current value = 1.0000000000000000e-03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KPA_PER_PA                    =
    1.0 / UnitConversion::PA_PER_KPA;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (kPa/mmH2O)  millimeters of H2O to kilopascals conversion factor.
/// - Pressure, Primary
/// - Current value = 9.8066500000000001e-03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KPA_PER_MMH2O                 =
    9.80665e-03;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (kPa/kgf/cm2) kilograms (force) per centimeter squared to kilopascals conversion factor
/// - Pressure, Primary (NIST)
/// - Current value = 9.8066500000000005e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KPA_PER_KGF_PER_CM2           =
    9.80665e+01;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (kg/lbm) Pounds mass to kilograms conversion factor
/// - Mass, Primary, NIST
/// - Current value = 4.5359240000000001e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KG_PER_LBM                    =
    0.4535924;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (lbm/kg) Kilograms to pounds mass conversion factor
/// - Mass, Derived
/// - Current value = 2.2046224760379585e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::LBM_PER_KG                    =
    1.0 / UnitConversion::KG_PER_LBM;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (g/lbm) Pounds mass to grams conversion factor
/// - Mass, Derived
/// - Current value = 4.5359240000000000e+02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::G_PER_LBM                     =
    1000.0 * UnitConversion::KG_PER_LBM;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (lbm/g) grams to pounds mass conversion factor
/// - Mass, Derived
/// - Current value = 2.2046224760379584e-03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::LBM_PER_G                     =
    1.0 / UnitConversion::G_PER_LBM;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  ((kg/s)/(lbm/hr)) kilograms per second to pounds mass per hour mass rate conversion
///           factor
/// - Mass, Primary, NIST
/// - Current value = 1.2599788888888888e-04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KG_PER_SEC_PER_LBM_PER_HR     =
    0.4535924 / UnitConversion::SEC_PER_HR;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  ((lbm/hr)/(kg/s)) pounds mass per hour to kilograms per second mass rate conversion
///           factor
/// - Mass, Derived
/// - Current value = 7.9366409137366509e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::LBM_PER_HR_PER_KG_PER_SEC     =
    1.0 / UnitConversion::KG_PER_SEC_PER_LBM_PER_HR;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (kg/lbm) kilograms per second to pounds mass per second mass rate conversion factor
/// - Mass Flow, Primary, NIST
/// - Current value = 4.5359240000000001e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KG_PER_SEC_PER_LBM_PER_SEC    =
    UnitConversion::KG_PER_LBM;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  ((lbm/s)/(kg/s) pounds mass per second to kilograms per second mass rate conversion
///           factor
/// - Mass Flow, Derived
/// - Current value = 2.2046224760379585e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::LBM_PER_SEC_PER_KG_PER_SEC    =
    1.0 / UnitConversion::KG_PER_SEC_PER_LBM_PER_SEC;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (scfm @ 0 C)/(kg/s) kilograms per second to standard cubic feet per minute @ 0 degrees
///           Celsius conversion factor
/// - NIST defines standard temperature at 0 C.
/// - Wikipedia defines 455 scfm @ 0 C = 1000 kg/hr.
/// - Current value = 1638.0
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SCFM0C_PER_KG_PER_SEC         =
    455.0 * 3600.0 / 1000.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (N/lbf) Pounds force to newtons conversion factor
/// - Physical, Primary
/// - Current value = 4.4482216000000001e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::N_PER_LBF                     =
    4.4482216;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (lbf/N) Newtons to pounds force conversion factor
/// - Physical, Derived
/// - Current value = 2.2480894387096181e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::LBF_PER_N                     =
    1.0 / UnitConversion::N_PER_LBF;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (N*m/in/lbf) Inch pounds force to newton meters conversion factor
/// - Physical, Primary
/// - Current value = 1.1298482902761670e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::N_M_PER_IN_LBF                =
    1.1298482902761670e-01;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (in*lbf/N/m) Newton meters to inch pounds force conversion factor
/// - Physical, Derived
/// - Current value = 8.8507457913271850e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::IN_LBF_PER_N_M                =
    1.0  / UnitConversion::N_M_PER_IN_LBF;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (g*m2/s2/BTU) BTU to joule conversion factor
/// - Energy, Primary, NIST
/// - Current value = 1.0550560000000000e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::J_PER_BTU                     =
    1055.056;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (BTU*s2/g/m2) Joule to BTU conversion factor
/// - Energy, Derived
/// - Current value = 9.4781698791343778e-04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::BTU_PER_J                     =
    1.0 / UnitConversion::J_PER_BTU;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (kg*m2/s2/BTU) BTU to kilojoule conversion factor
/// - Energy, Derived
/// - Current value = 1.0550560000000000e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KJ_PER_BTU                    =
    0.001 * UnitConversion::J_PER_BTU;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (BTU*s2/kg/m2) Kilojoule to BTU conversion factor
/// - Energy, Derived
/// - Current value = 9.4781698791343783e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::BTU_PER_KJ                    =
    1000.0 * UnitConversion::BTU_PER_J;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (BTU*s2/kg/m2) BTU/sec to watt conversion factor
/// - Power, Derived
/// - Current value = 1.0550560000000000e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::W_S_PER_BTU                   =
    UnitConversion::J_PER_BTU;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (kg*m2/s2/BTU) Watt to BTU/sec conversion factor
/// - Power, Derived
/// - Current value = 9.4781698791343778e-04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::BTU_PER_W_S                   =
    1.0 / UnitConversion::W_S_PER_BTU;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (kg*m2*hr/s2/BTU) BTU/hr to watt conversion factor
/// - Power, Derived
/// - Current value = 2.9307111111111112e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::W_PER_BTU_PER_HR              =
    UnitConversion::W_S_PER_BTU / UnitConversion::SEC_PER_HR;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (BTU*s3/kg/m2/hr) Watt to BTU/hr conversion factor
/// - Power, Derived
/// - Current value = 3.4121411564883761e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::BTU_PER_HR_PER_W              =
    1.0 / UnitConversion::W_PER_BTU_PER_HR;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (BTU*s3/Mg/m2/hr) Kilowatt to BTU/hr conversion factor
/// - Power, Derived
/// - Current value = 3.4121411564883761e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::BTU_PER_HR_PER_KW             =
    1000.0 * UnitConversion::BTU_PER_HR_PER_W;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (Mg*m2*hr/s2/BTU) BTU/hr to Kilowatt conversion factor
/// - Power, Derived
/// - Current value = 2.9307111111111114e-04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KW_PER_BTU_PER_HR             =
    0.001 * UnitConversion::W_PER_BTU_PER_HR;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (HP/ft*lbf/min) Foot pounds force per minute to horsepower conversion factor
/// - Power, Primary, but should be derived if actually used
/// - Current value = 3.3000000000000000e+04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::HP_PER_FTLBF_OVER_MIN         =
    33000.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  Centipoise to pounds force per foot hour dynamic viscosity conversion factor
/// - Dynamic Viscosity, Primary, but should be derived if actually used
/// - Current value = 2.4190881537000002e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::LBF_OVER_FTHR_PER_CP          =
    2.4190881537;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (BTU*kg/Lbm/kj) Specific heat conversion factor
/// - Specific Heat, Primary, but should be derived if actually used
/// - Current value = 2.3884589663000000e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::BTU_OVER_LBMF_PER_KJ_OVER_KGK =
    0.23884589663;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (KJ*lbm/kg/BTU) Specific heat conversion factor
/// - Specific Heat, Primary, but should be derived if actually used
/// - Current value = 4.1867999999999999e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::KJ_OVER_KGK_PER_BTU_OVER_LBMF =
    4.1868;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (J*lbm/kg/BTU) Specific heat conversion factor
/// - Specific Heat, Derived
/// - Current value = 4.1868000000000002e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::J_OVER_KGK_PER_BTU_OVER_LBMF  =
    1000.0 * UnitConversion::KJ_OVER_KGK_PER_BTU_OVER_LBMF;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (F/C) Centigrade (Kelvin) to Fahrenheit (Rankine) conversion scale factor
/// - Temperature, Primary
/// - Current value = 1.8000000000000000e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::F_PER_C                       =
    1.8;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (C/F) Fahrenheit (Rankine) to Centigrade (Kelvin) conversion scale factor
/// - Temperature, Derived
/// - Current value = 5.5555555555555558e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::C_PER_F                       =
    1.0 / UnitConversion::F_PER_C;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (K) Kelvin to Centigrade conversion bias
/// - Temperature, Primary
/// - Current value = 2.7314999999999998e+02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::ZERO_C_IN_K                   =
    273.15;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details
/// (R) Rankine to Fahrenheit conversion bias
/// - Temperature, Primary
/// - Current value = 4.5967000000000002e+02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::ZERO_F_IN_R                   =
    459.67;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details
/// (F) Centigrade to Fahrenheit conversion bias
/// - Temperature, Primary
/// - Current value = 3.2000000000000000e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::ZERO_C_IN_F                   =
    32.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details
/// (ugray/mrad) Millirad to microgray conversion factor.
/// - Absorbed Radiation Dose, Primary
/// - Current value = 1.0000000000000000e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::MILLIRAD_TO_MICROGRAY         =
    10.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details
/// (usievert/mrem) Millirem to microsievert conversion factor.
/// - Percentage, Primary
/// - Current value = 1.0000000000000000e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::MILLIREM_TO_MICROSIEVERT      =
    10.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details
/// (--) Fraction to percentage conversion factor
/// - Percentage, Primary
/// - Current value = 1.0000000000000000e+02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PERCENTAGE                    =
    100.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) Pi
/// - Angle, Primary, Computed
/// - Current value = 3.1415926535897931e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PI_UTIL                       =
    acos(-1.0);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) 2 * PI_UTIL
/// - Angle, Derived
/// - Current value = 6.2831853071795862e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::TWO_PI                        =
    2.0 * UnitConversion::PI_UTIL;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) sqrt(PI_UTIL)
/// - Angle, Derived
/// - Current value = 1.7724538509055159e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SQRT_PI                       =
    sqrt(UnitConversion::PI_UTIL);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) 2 * sqrt(PI_UTIL)
/// - Angle, Derived
/// - Current value = 3.5449077018110318e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::TWO_SQRT_PI                   =
    2.0 * sqrt(UnitConversion::PI_UTIL);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) sqrt(2 * PI_UTIL)
/// - Angle, Derived
/// - Current value = 2.5066282746310002e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SQRT_2PI                      =
    sqrt(2.0 * UnitConversion::PI_UTIL);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) PI_UTIL / 2
/// - Angle, Derived
/// - Current value = 1.5707963267948966e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PI_OVER_2                     =
    UnitConversion::PI_UTIL / 2.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) PI_UTIL / 3
/// - Angle, Derived
/// - Current value = 1.0471975511965976e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PI_OVER_3                     =
    UnitConversion::PI_UTIL / 3.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) PI_UTIL / 4
/// - Angle, Derived
/// - Current value = 7.8539816339744828e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PI_OVER_4                     =
    UnitConversion::PI_UTIL / 4.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) PI_UTIL / 6
/// - Angle, Derived
/// - Current value = 5.2359877559829882e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::PI_OVER_6                     =
    UnitConversion::PI_UTIL / 6.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) 4 * PI_UTIL / 3
/// - Angle, Derived
/// - Current value = 4.1887902047863905e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::FOUR_PI_OVER_3                =
    4.0 * UnitConversion::PI_UTIL / 3;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (d/r) Radians to degrees conversion factor
/// - Angle, Derived
/// - Current value = 5.7295779513082323e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::DEG_PER_RAD_UTIL              =
    180.0 / UnitConversion::PI_UTIL;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (r/d) Degrees to radians conversion factor
/// - Angle, Derived
/// - Current value = 1.7453292519943295e-02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::RAD_PER_DEG                   =
    UnitConversion::PI_UTIL / 180.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (r/rev) Revolutions to radians conversion factor
/// - Angle, Derived
/// - Current value = 6.2831853071795862e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::RAD_PER_REV                   =
    UnitConversion::TWO_PI;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (d/rev) Revolutions to degrees conversion factor
/// - Angle, Derived
/// - Current value = 360.0
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::DEG_PER_REV                   =
    360.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (rev/r) Radians to revolutions conversion factor
/// - Angle, Derived
/// - Current value = 1.0/6.2831853071795862e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::REV_PER_RAD                   =
    1.0/UnitConversion::RAD_PER_REV;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (rev/d) degrees to revolutions conversion factor
/// - Angle, Derived
/// - Current value = 1.0/360.0
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::REV_PER_DEG                   =
    1.0/UnitConversion::DEG_PER_REV;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (r/arcmin) Arc minutes to radians conversion factor
/// - Angle, Derived
/// - Current value = 2.9088820866572158e-04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::RAD_PER_ARCMIN                =
    UnitConversion::PI_UTIL / (180.0 * 60.0);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (r/arcsec) Arc seconds to radians conversion factor
/// - Angle, Derived
/// - Current value = 4.8481368110953598e-06
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::RAD_PER_ARCSEC                =
    UnitConversion::PI_UTIL / (180.0 * 60.0 * 60.0);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (mil/d) Degrees to mils conversion factor
/// - Angle, Primary, Computed
/// - Current value = 1.7777777777777779e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::MIL_PER_DEG                   =
    6400.0 / 360.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (d/mil) Mils to degrees conversion factor
/// - Angle, Derived
/// - Current value = 5.6249999999999994e-02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::DEG_PER_MIL                   =
    1.0 / UnitConversion::MIL_PER_DEG;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (mil/r) Radians to mils conversion factor
/// - Angle, Derived
/// - Current value = 1.0185916357881301e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::MIL_PER_RAD                   =
    6400.0 / UnitConversion::TWO_PI;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (r/mil) Mils to radians conversion factor
/// - Angle, Derived
/// - Current value = 9.8174770424681044e-04
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::RAD_PER_MIL                   =
    UnitConversion::TWO_PI / 6400.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (s/min/2pi)  Seconds in a minute per radian
/// - Time, Derived
/// - Current value = 9.5492965855137211e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SEC_PER_MIN_PER_2PI           =
    UnitConversion::SEC_PER_MIN / TWO_PI;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (kg/m3) standard density of water
/// - Physical, Primary, ?
/// - Current value = 1.0000000000000000e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::STD_DENSITY_WATER             =
    1.0e+03;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m3/kg) standard specific volume of water
/// - Physical, Derived
/// - Current value = 1.0000000000000000e-03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::STD_SPECIFIC_VOLUME_WATER     =
    1.0 / UnitConversion::STD_DENSITY_WATER;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (kg/m3) standard density of dry air at 20 deg C and 101.325 kPa
/// - Physical, Primary, NIST
/// - Current value = 1.2040999999999999e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::STD_DENSITY_AIR               =
    1.2041;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m3/kg) standard specific volume of dry air at 20 deg C and 101.325 kPa
/// - Physical, Derived
/// - Current value = 8.3049580599617978e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::STD_SPECIFIC_VOLUME_AIR       =
    1.0 / UnitConversion::STD_DENSITY_AIR;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (W/m2/K4) Stephan-Boltzmann constant
/// - Physical, Primary, NIST
/// - Current value = 5.6704000000000003e-08
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::STEFAN_BOLTZMANN_CONST_SI     =
    5.670400e-8;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (BTU/hr/ft2/R4) Stefan-Boltzmann constant
/// - Physical, Primary, but should be derived if actually used
/// - Current value = 1.7140000000000001e-09
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::STEFAN_BOLTZMANN_CONST_ENG    =
    0.1714e-8;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (J/K) Boltzmann constant
/// - Physical, Primary, NIST
/// - Current value = 1.3806504000000001e-23
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::BOLTZMANN_CONST               =
    1.3806504e-23;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (dBW/K/Hz) Boltzmann constant
/// - Physical, Primary, but should be derived if actually used
/// - Current value = -2.2859899999999999e+02
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::BOLTZMANN_CONST_DBW           =
    -228.599;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m/s2) Standard Earth gravitational acceleration
/// - Physical, Primary, NIST
/// - Current value = 9.8066499999999994e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::STD_GRAVITY_SI                =
    9.80665;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (ft/s2) Standard Earth gravitational acceleration
/// - Physical, Derived
/// - Current value = 3.2174048556430442e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::STD_GRAVITY_ENG               =
    UnitConversion::STD_GRAVITY_SI *  UnitConversion::FT_PER_M;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (ft lbm/lbf/s2) Pounds force to pounds mass conversion factor
/// - Physical, Primary
/// - Current value = 3.2170000000000002e+01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::GC                            =
    32.17;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (J/mol/K) Universal gas constant
/// - Physical, Primary, NIST
/// - Current value = 8.3144720000000003e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::UNIV_GAS_CONST_SI             =
    8.314472;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (lbf*ft/lb/mol/R) Universal gas constant
/// - Physical, Primary, but should be derived if actually used
/// - Current value = 1.5453489999999999e+03
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::UNIV_GAS_CONST_ENG            =
    1545.349;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m/s) Speed of light
/// - Physical, Primary, NIST
/// - Current value = 2.9979245800000000e+08
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SPEED_LIGHT_SI                =
    299792458.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m2/s2) Speed of light squared
/// - Physical, Derived
/// - Current value = 8.9875517873681760e+16
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SPEED_LIGHT_SQ_SI             =
    UnitConversion::SPEED_LIGHT_SI * UnitConversion::SPEED_LIGHT_SI;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (coulomb) Charge of the electron
/// - Physical, Primary, NIST
/// - Current value = 1.6021764870000000e-19
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::ELECTRON_CHARGE               =
    1.602176487e-19;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (coulomb / mole ) Faraday's constant
/// - Physical, Primary,
/// - Current value = 96487.0
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::FARADAY                       =
    96487.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m) Earth equatorial radius (WGS-84)
/// - Physical, Primary, WGS-84
/// - Current value = 6.3781370000000000e+06
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::EARTH_EQUATORIAL_RADIUS       =
    6378137.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (m) Earth polar radius
/// - Physical, Primary, WGS-84
/// - Current value = 6.3567523141999999e+06
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::EARTH_POLAR_RADIUS            =
    6356752.3142;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) sqrt(2)
/// - Numeric, Primary, Computed
/// - Current value = 1.4142135623730951e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SQRT2                         =
    sqrt(2.0);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) sqrt(2)/2
/// - Numeric, Derived
/// - Current value = 7.0710678118654757e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SQRT1_2                       =
    UnitConversion::SQRT2 / 2.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) sqrt(3)
/// - Numeric, Primary, Computed
/// - Current value = 1.7320508075688772e+00
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SQRT3                         =
    sqrt(3.0);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @details  (--) sqrt(3)/2
/// - Numeric, Primary, Computed
/// - Current value = 8.6602540378443860e-01
////////////////////////////////////////////////////////////////////////////////////////////////////
const double UnitConversion::SQRT3_2                       =
    sqrt(3.0) / 2.0;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in]  type   (--)  Type of the unit-to-unit conversion to be performed.
/// @param[in]  input  (--)  Input value to be converted.
///
/// @return   double  (--)  The converted input value.
///
/// @throws   TsOutOfBoundsException, TsInitializationException
///
/// @details  Causes the desired units conversion type to be performed on the input value.  It uses
///           the type argument as an index to the desired conversion function in a function pointer
///           array.  Protects against indexing out-of-bounds in the array due to a bad type
///           argument (throws TsOutOfBoundsException).  Protects against null function pointer in
///           the array (throws TsInitializationException).
////////////////////////////////////////////////////////////////////////////////////////////////////
double UnitConversion::convert(const Type type, const double input)
{
    if (type < NO_CONVERSION or type >= NUM_CONVERSIONS) {
        TS_HS_EXCEPTION(TS_HS_ERROR, "Math", "invalid unit conversion type", TsOutOfBoundsException,
                        "Input Argument Out of Range", "")

    } else {
        if (convertFunctions[type]) {
            return convertFunctions[type](input);

        } else {
            TS_HS_EXCEPTION(TS_HS_ERROR, "Math", "missing conversion function",
                            TsInitializationException, "Invalid Initialization Data", "")
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in]  pratio  (--)  Input power ratio
///
/// @return   double  (dB)  Power ratio converted to decibels
///
/// @throws   TsOutOfBoundsException
///
/// @details  Converts power ratio to decibels.
////////////////////////////////////////////////////////////////////////////////////////////////////
double UnitConversion::convertPrToDb(const double pratio)
{
    /// - Throw an exception if input power ratio is not sufficiently positive.
    if (pratio < DBL_EPSILON) {
        TS_HS_EXCEPTION(TS_HS_ERROR, "Math", "log10 of value <= 0.0", TsOutOfBoundsException,
                        "Input Argument Out of Range", "")
    }

    return 10.0 * log10(pratio);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @param[in]  power  (W)  Input power in watts
///
/// @return   double  (dB*W)  Power converted to decibel watts
///
/// @details  Converts a power from watts to decibel watts.
///
/// @warning  If power <= 0, then 0 is returned.
////////////////////////////////////////////////////////////////////////////////////////////////////
double UnitConversion::convertWToDbw(const double power)
{
    double dBW;
    if (power > 0.0) {
        // Power value neglects division by 1 Watt.
        dBW = 10.0 * log10(power);
    } else {
        /// - Since DB's are generally summed, a return value of 0.0 effectively contributes
        ///   nothing to further computations.
        hsSendMsg(TS_HS_WARNING, "Math", "returned 0.0 for log10 of value <= 0.0");
        dBW = 0.0;
    }

   return dBW;
}
