#ifndef UtGunnsFluidJumperPlug_EXISTS
#define UtGunnsFluidJumperPlug_EXISTS

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @defgroup UT_JUMPER_PLUG    Gunns Fluid Jumper Plug Unit Test
/// @ingroup  UT_GUNNS
///
/// @copyright Copyright 2019 United States Government as represented by the Administrator of the
///            National Aeronautics and Space Administration.  All Rights Reserved.
///
/// @details  Unit Tests for the Gunns Fluid Jumper Plug
/// @{
////////////////////////////////////////////////////////////////////////////////////////////////////

#include <cppunit/extensions/HelperMacros.h>
#include <cppunit/TestFixture.h>
#include <iostream>

#include "core/GunnsFluidJumperPlug.hh"
#include "core/GunnsFluidSocket.hh"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    Implement derived GunnsFluidJumperPlug and befriend UtGunnsFluidJumperPlug.
///
/// @details  Class derived from the unit under test.  It befriends the unit test case driver class
///           to allow it access to protected data members.  It implements the Fluid Jumper Plug
///           target variables and enumeration, and implements the accessor methods to them.  This
///           is similar to how the derived Fluid Jumper Plug classes should look in the GUNNS
///           network managers generated by GunnShow.
////////////////////////////////////////////////////////////////////////////////////////////////////
class FriendlyGunnsFluidJumperPlug : public GunnsFluidJumperPlug
{
    public:
        enum TestSocketList {
            SOCKET_1 = 0,
            SOCKET_2 = 1,
            SOCKET_3 = 2,
            NONE     = 3
        };

        TestSocketList mActiveConnection;
        TestSocketList mConnectionRequest;
        TestSocketList mDisconnectionRequest;

        FriendlyGunnsFluidJumperPlug(const std::string name)
            :
            GunnsFluidJumperPlug(name, static_cast <int> (NONE)),
            mActiveConnection    (NONE),
            mConnectionRequest   (NONE),
            mDisconnectionRequest(NONE) {}
        virtual ~FriendlyGunnsFluidJumperPlug() {}
        virtual void setActiveConnection    (const int index) {mActiveConnection     = static_cast <TestSocketList> (index);}
        virtual void setConnectionRequest   (const int index) {mConnectionRequest    = static_cast <TestSocketList> (index);}
        virtual void setDisconnectionRequest(const int index) {mDisconnectionRequest = static_cast <TestSocketList> (index);}
        virtual int  getActiveConnection()     {return static_cast <int> (mActiveConnection);}
        virtual int  getConnectionRequest()    {return static_cast <int> (mConnectionRequest);}
        virtual int  getDisconnectionRequest() {return static_cast <int> (mDisconnectionRequest);}
        virtual int  getNoConnection()         {return static_cast <int> (NONE);}
        friend class UtGunnsFluidJumperPlug;
        friend class UtGunnsFluidJumper;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    Gunns Fluid Jumper Plug unit tests.
////
/// @details  This class provides the unit tests for the GunnsFluidJumperPlug class within the
///           CPPUnit framework.
////////////////////////////////////////////////////////////////////////////////////////////////////
class UtGunnsFluidJumperPlug: public CppUnit::TestFixture
{
    private:
        /// @brief Copy constructor unavailable since declared private and not implemented.
        UtGunnsFluidJumperPlug(const UtGunnsFluidJumperPlug& that);
        /// @brief Assignment operator unavailable since declared private and not implemented.
        UtGunnsFluidJumperPlug& operator =(const UtGunnsFluidJumperPlug& that);

        CPPUNIT_TEST_SUITE(UtGunnsFluidJumperPlug);
        CPPUNIT_TEST(testConstructors);
        CPPUNIT_TEST(testConnections);
        CPPUNIT_TEST(testDirectConnection);
        CPPUNIT_TEST_SUITE_END();

        std::string                   tName;          /**< (--) Article name       */
        FriendlyGunnsFluidJumperPlug* tArticle;       /**< (--) Article under test */
        GunnsFluidNode                tNodes[3];      /**< (--) Network nodes */
        GunnsNodeList                 tNodeList;      /**< (--) Network nodes list */
        std::vector<GunnsBasicLink*>  tLinks;         /**< (--) Network links vector */
        GunnsFluidSocket              tSocket1;       /**< (--) Test socket */
        GunnsFluidSocket              tSocket2;       /**< (--) Test socket */
        GunnsFluidSocket              tSocket3;       /**< (--) Test socket */

    public:
        UtGunnsFluidJumperPlug();
        virtual ~UtGunnsFluidJumperPlug();
        void tearDown();
        void setUp();
        void testConstructors();
        void testConnections();
        void testDirectConnection();
};

///@}

#endif
