#ifndef UtGunnsBasicJumperPlug_EXISTS
#define UtGunnsBasicJumperPlug_EXISTS

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @defgroup UT_JUMPER_PLUG    Gunns Basic Jumper Plug Unit Test
/// @ingroup  UT_GUNNS
///
/// @copyright Copyright 2019 United States Government as represented by the Administrator of the
///            National Aeronautics and Space Administration.  All Rights Reserved.
///
/// @details  Unit Tests for the Gunns Basic Jumper Plug
/// @{
////////////////////////////////////////////////////////////////////////////////////////////////////

#include <cppunit/extensions/HelperMacros.h>
#include <cppunit/TestFixture.h>
#include <iostream>

#include "core/GunnsBasicJumperPlug.hh"
#include "core/GunnsBasicConductor.hh"
#include "core/GunnsBasicSocket.hh"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    Implement derived GunnsBasicJumperPlug and befriend UtGunnsBasicJumperPlug.
///
/// @details  Class derived from the unit under test.  It befriends the unit test case driver class
///           to allow it access to protected data members.  It implements the Basic Jumper Plug
///           target variables and enumeration, and implements the accessor methods to them.  This
///           is similar to how the derived Basic Jumper Plug classes should look in the GUNNS
///           network managers generated by GunnShow.
////////////////////////////////////////////////////////////////////////////////////////////////////
class FriendlyGunnsBasicJumperPlug : public GunnsBasicJumperPlug
{
    public:
        enum TestSocketList {
            SOCKET_1 = 0,
            SOCKET_2 = 1,
            SOCKET_3 = 2,
            NONE     = 3
        };

        TestSocketList mActiveConnection;
        TestSocketList mLastDisconnection;
        TestSocketList mConnectionRequest;
        TestSocketList mDisconnectionRequest;

        FriendlyGunnsBasicJumperPlug(const std::string name)
            :
            GunnsBasicJumperPlug(name, static_cast <int> (NONE)),
            mActiveConnection    (NONE),
            mLastDisconnection   (NONE),
            mConnectionRequest   (NONE),
            mDisconnectionRequest(NONE) {}
        virtual ~FriendlyGunnsBasicJumperPlug() {}
        virtual void setActiveConnection    (const int index) {mActiveConnection     = static_cast <TestSocketList> (index);}
        virtual void setLastDisconnection   (const int index) {mLastDisconnection    = static_cast <TestSocketList> (index);}
        virtual void setConnectionRequest   (const int index) {mConnectionRequest    = static_cast <TestSocketList> (index);}
        virtual void setDisconnectionRequest(const int index) {mDisconnectionRequest = static_cast <TestSocketList> (index);}
        virtual int  getActiveConnection()     {return static_cast <int> (mActiveConnection);}
        virtual int  getLastDisconnection()    {return static_cast <int> (mLastDisconnection);}
        virtual int  getConnectionRequest()    {return static_cast <int> (mConnectionRequest);}
        virtual int  getDisconnectionRequest() {return static_cast <int> (mDisconnectionRequest);}
        virtual int  getNoConnection()         {return static_cast <int> (NONE);}
        friend class UtGunnsBasicJumperPlug;
        friend class UtGunnsBasicJumper;
};

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief    Gunns Basic Jumper Plug unit tests.
////
/// @details  This class provides the unit tests for the GunnsBasicJumperPlug class within the
///           CPPUnit framework.
////////////////////////////////////////////////////////////////////////////////////////////////////
class UtGunnsBasicJumperPlug: public CppUnit::TestFixture
{
    private:
        /// @brief Copy constructor unavailable since declared private and not implemented.
        UtGunnsBasicJumperPlug(const UtGunnsBasicJumperPlug& that);
        /// @brief Assignment operator unavailable since declared private and not implemented.
        UtGunnsBasicJumperPlug& operator =(const UtGunnsBasicJumperPlug& that);

        CPPUNIT_TEST_SUITE(UtGunnsBasicJumperPlug);
        CPPUNIT_TEST(testConstructors);
        CPPUNIT_TEST(testAddSocket);
        CPPUNIT_TEST(testNominalInitialization);
        CPPUNIT_TEST(testInitializationExceptions);
        CPPUNIT_TEST(testGetSocket);
        CPPUNIT_TEST(testAccessors);
        CPPUNIT_TEST(testModifiers);
        CPPUNIT_TEST(testConnection);
        CPPUNIT_TEST(testDisconnection);
        CPPUNIT_TEST(testQuickSwap);
        CPPUNIT_TEST(testDirectConnection);
        CPPUNIT_TEST_SUITE_END();

        std::string                   tName;          /**< (--) Article name       */
        FriendlyGunnsBasicJumperPlug* tArticle;       /**< (--) Article under test */
        GunnsBasicNode                tNodes[3];      /**< (--) Network nodes */
        GunnsNodeList                 tNodeList;      /**< (--) Network nodes list */
        std::vector<GunnsBasicLink*>  tLinks;         /**< (--) Network links vector */
        GunnsBasicSocket              tSocket1;       /**< (--) Test socket */
        GunnsBasicSocket              tSocket2;       /**< (--) Test socket */
        GunnsBasicSocket              tSocket3;       /**< (--) Test socket */

    public:
        UtGunnsBasicJumperPlug();
        virtual ~UtGunnsBasicJumperPlug();
        void tearDown();
        void setUp();
        void testConstructors();
        void testAddSocket();
        void testNominalInitialization();
        void testInitializationExceptions();
        void testGetSocket();
        void testAccessors();
        void testModifiers();
        void testConnection();
        void testDisconnection();
        void testQuickSwap();
        void testDirectConnection();
};

///@}

#endif
